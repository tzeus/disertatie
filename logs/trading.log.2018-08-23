INFO  2018-08-23 09:26:10,643 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:26:10,664 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 09:26:10,670 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 09:26:10,682 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 09:26:10,683 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:26:10,684 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e$$FastClassByMockitoWithCGLIB$$d53fa016.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 09:26:10,694 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e$$FastClassByMockitoWithCGLIB$$d53fa016.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:26:10,733 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:26:10,739 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.CGLIB$getLatestAccountInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e$$FastClassByMockitoWithCGLIB$$d53fa016.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$9e637d9e.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:33:50,408 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:33:50,482 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 09:33:50,493 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 09:33:50,524 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 09:33:50,532 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:33:50,536 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 09:33:50,554 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:34:18,899 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:34:18,901 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
ERROR 2018-08-23 09:34:18,902 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:120)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:34:18,999 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:34:19,006 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:34:43,904 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 09:35:30,027 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 09:35:40,149 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 09:36:01,590 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:41:52,631 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:41:52,667 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:41:52,678 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 09:41:52,679 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 09:41:52,681 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 09:41:52,682 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:41:52,682 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 09:41:52,689 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:42:02,119 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:42:02,152 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 09:43:08,483 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 09:43:08,497 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 09:43:08,497 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:43:12,188 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 09:43:15,429 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:43:15,471 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:43:19,106 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:57:46,576 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 09:57:46,639 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 09:57:49,514 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 09:57:49,540 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 09:57:49,541 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 09:57:49,546 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$0(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 09:58:31,546 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$0(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 09:58:46,004 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:00:18,262 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:00:36,981 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:03:11,483 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:03:11,521 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:03:11,529 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:03:11,530 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:03:11,531 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:03:11,532 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:03:11,533 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:03:11,539 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8$$FastClassByMockitoWithCGLIB$$8ef55265.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$aaf74bf8.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:17:30,290 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:17:30,336 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:17:30,352 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:18:36,749 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:18:36,751 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
ERROR 2018-08-23 10:18:36,755 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:94)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:18:36,817 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:18:36,831 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:151)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:75)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:18:43,155 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:18:43,191 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:18:43,199 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
ERROR 2018-08-23 10:19:01,474 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.ClassCastException: java.util.ArrayList cannot be cast to org.json.simple.JSONArray
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:99)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:19:01,525 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:19:01,536 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:151)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:75)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:19:34,973 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:19:35,013 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:19:35,020 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:19:35,032 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:19:35,036 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:19:35,037 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:63)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:134)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:19:35,042 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:135)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:19:35,074 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:19:43,605 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:70)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:101)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:20:38,119 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:20:38,214 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to org.json.simple.JSONObject
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:152)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:20:38,234 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:20:38,240 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:20:38,241 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:20:38,243 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:20:38,244 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:20:38,244 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:20:38,251 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:20:53,877 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:20:53,903 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:20:53,910 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:20:53,922 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:20:53,927 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:20:53,928 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$0(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:20:53,932 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$0(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:20:53,966 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 10:21:28,615 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:21:28,619 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:21:34,956 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:22:33,229 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to org.json.simple.JSONObject
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:152)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:22:33,268 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:22:33,278 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:22:33,280 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:22:33,282 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:22:33,284 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:22:33,284 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:22:33,287 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$2(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:24:49,802 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:24:49,833 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:24:49,840 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:24:49,854 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:24:49,861 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:24:49,863 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:24:49,872 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:24:49,920 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:25:31,223 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.Long
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:161)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:48:12,452 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:51:05,997 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.Long
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:161)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:51:06,034 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:51:06,052 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:51:06,055 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:51:06,057 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:51:06,057 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:51:06,058 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:51:06,069 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:55:58,055 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:55:58,091 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:55:58,100 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:55:58,120 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:55:58,121 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:55:58,123 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:55:58,129 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:55:58,170 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:55:58,375 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:158)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:56:23,146 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 10:56:23,176 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 10:56:23,183 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 10:56:23,197 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 10:56:23,201 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 10:56:23,202 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:145)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:110)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 10:56:23,213 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 10:56:23,252 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:01:11,475 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:158)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:76)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.accountIdTest(OandaAccountDataProviderServiceTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:01:58,387 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:01:58,641 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:01:58,656 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:01:58,666 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:01:58,668 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:01:58,668 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:01:58,670 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:01:58,685 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:04:34,286 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:04:34,313 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:04:34,319 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:04:34,360 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:04:34,362 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:04:34,367 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:04:34,375 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.CGLIB$getLatestAccountsInfo$1(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca$$FastClassByMockitoWithCGLIB$$d6d6aac7.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$7d8efaca.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:04:34,422 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:05:16,885 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:05:17,046 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:05:17,056 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:05:17,057 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:05:17,058 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:05:33,954 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:05:33,961 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:05:37,832 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$3(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:12:30,505 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:12:30,530 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:12:32,523 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:12:32,532 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:12:35,420 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:12:37,456 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:12:37,461 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:12:37,488 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:12:45,486 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:12:45,509 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:12:53,445 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:12:53,457 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:12:53,460 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:13:02,881 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:13:02,887 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$4(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:13:02,916 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:13:29,784 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
INFO  2018-08-23 11:14:01,710 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:14:01,716 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:14:03,601 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {  "accounts": [    {      "id": "104-747-293-585",       "tags": []    },    {      "id": "208-834-988-934",       "tags": []    }  ]  }
INFO  2018-08-23 11:14:03,602 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 104-747-293-585
INFO  2018-08-23 11:14:03,603 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxtrade.oanda.com/v3/accounts/104-747-293-585 HTTP/1.1
ERROR 2018-08-23 11:15:01,188 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Exception encountered whilst getting info for account:104-747-293-585
java.io.IOException: Stream Closed
	at java.io.FileInputStream.readBytes(Native Method)
	at java.io.FileInputStream.read(FileInputStream.java:255)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at tradingAPI.util.TradingUtils.responseToString(TradingUtils.java:98)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountInfo(OandaAccountDataProviderService.java:146)
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:111)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
ERROR 2018-08-23 11:15:01,196 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Exception encountered while retrieving all accounts data
java.lang.NullPointerException
	at oandaAPI.account.OandaAccountDataProviderService.getLatestAccountsInfo(OandaAccountDataProviderService.java:112)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.CGLIB$getLatestAccountsInfo$5(<generated>)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1$$FastClassByMockitoWithCGLIB$$478f1a85.invoke(<generated>)
	at org.mockito.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:216)
	at org.mockito.internal.creation.cglib.DelegatingMockitoMethodProxy.invokeSuper(DelegatingMockitoMethodProxy.java:19)
	at org.mockito.internal.invocation.realmethod.DefaultRealMethod.invoke(DefaultRealMethod.java:21)
	at org.mockito.internal.invocation.realmethod.CleanTraceRealMethod.invoke(CleanTraceRealMethod.java:30)
	at org.mockito.internal.invocation.InvocationImpl.callRealMethod(InvocationImpl.java:112)
	at org.mockito.internal.stubbing.answers.CallsRealMethods.answer(CallsRealMethods.java:41)
	at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:93)
	at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)
	at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)
	at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)
	at oandaAPI.account.OandaAccountDataProviderService$$EnhancerByMockitoWithCGLIB$$d8ab4de1.getLatestAccountsInfo(<generated>)
	at oandaAPI.account.OandaAccountDataProviderServiceTest.allAccountsTest(OandaAccountDataProviderServiceTest.java:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
INFO  2018-08-23 11:16:26,453 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:16:27,291 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:16:28,486 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 11:16:28,494 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 11:16:28,498 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 11:16:28,713 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 11:16:28,714 [main] oandaAPI.tests.AccountTest(testAccount): Found 1 accounts to trade for user bagrov
INFO  2018-08-23 11:16:28,714 [main] oandaAPI.tests.AccountTest(testAccount): +++++++++++++++++++++++++++++++ Dumping Account Info +++++++++++++++++++++++++++++
INFO  2018-08-23 11:16:28,715 [main] oandaAPI.tests.AccountTest(testAccount): Currency=EUR,NAV=100000.15,Total Balance=100000.15, UnrealisedPnl= 0.00, RealisedPnl= 0.00, MarginUsed= 0.00, MarginAvailable=100000.15, OpenTrades=0, amountAvailableRatio=1.00, marginRate=0.02
INFO  2018-08-23 11:16:28,715 [main] oandaAPI.tests.AccountTest(testAccount): ++++++++++++++++++++++ Finished Dumping Account Info +++++++++++++++++++++++++++++
INFO  2018-08-23 11:16:28,738 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=GBP_EUR HTTP/1.1
INFO  2018-08-23 11:16:29,259 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=EUR_GBP HTTP/1.1
INFO  2018-08-23 11:16:29,863 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): ASK OBject:  {"price":"0.89883","liquidity":10000000}
INFO  2018-08-23 11:16:29,864 [main] oandaAPI.tests.AccountTest(testAccount): Marging requirement for trading pair 5000 units of GBP_USD is 111.26 EUR 
INFO  2018-08-23 11:16:29,865 [main] oandaAPI.tests.AccountTest(testAccount): Marging requirement for trading pair 5000 units of EUR_GBP is 100.00 EUR 
ERROR 2018-08-23 11:17:15,666 [main] oandaAPI.tests.DefaultHeartBeatServiceTest(usageAndValidation): Usage: DefaultHeartBeatServiceTest <url> <accountid> <accesstoken>
INFO  2018-08-23 11:24:45,142 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/bagrov/pricing/stream?instruments=EUR_USD HTTP/1.1
WARN  2018-08-23 11:24:45,958 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): {"errorMessage":"Invalid value specified for 'accountID'"}
WARN  2018-08-23 11:24:49,493 [HeartBeatMonitorThread] tradingAPI.heartbeat.AbstractHeartBeatService(run): heartbeat source DEMO_MKTDATASTREAM is not responding. just restarted it and will listen for heartbeat after 10000 ms
INFO  2018-08-23 11:24:49,497 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/bagrov/pricing/stream?instruments=EUR_USD HTTP/1.1
WARN  2018-08-23 11:24:50,060 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): {"errorMessage":"Invalid value specified for 'accountID'"}
INFO  2018-08-23 11:25:10,929 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 11:25:11,806 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 11:25:12,638 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 11:25:12,644 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 11:25:12,647 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 11:25:12,835 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 11:25:12,836 [main] oandaAPI.tests.AccountTest(testAccount): Found 1 accounts to trade for user bagrov
INFO  2018-08-23 11:25:12,836 [main] oandaAPI.tests.AccountTest(testAccount): +++++++++++++++++++++++++++++++ Dumping Account Info +++++++++++++++++++++++++++++
INFO  2018-08-23 11:25:12,837 [main] oandaAPI.tests.AccountTest(testAccount): Currency=EUR,NAV=100000.15,Total Balance=100000.15, UnrealisedPnl= 0.00, RealisedPnl= 0.00, MarginUsed= 0.00, MarginAvailable=100000.15, OpenTrades=0, amountAvailableRatio=1.00, marginRate=0.02
INFO  2018-08-23 11:25:12,837 [main] oandaAPI.tests.AccountTest(testAccount): ++++++++++++++++++++++ Finished Dumping Account Info +++++++++++++++++++++++++++++
INFO  2018-08-23 11:25:12,862 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=GBP_EUR HTTP/1.1
INFO  2018-08-23 11:25:13,410 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=EUR_GBP HTTP/1.1
INFO  2018-08-23 11:25:14,022 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): ASK OBject:  {"price":"0.89858","liquidity":10000000}
INFO  2018-08-23 11:25:14,024 [main] oandaAPI.tests.AccountTest(testAccount): Marging requirement for trading pair 5000 units of GBP_USD is 111.30 EUR 
INFO  2018-08-23 11:25:14,024 [main] oandaAPI.tests.AccountTest(testAccount): Marging requirement for trading pair 5000 units of EUR_GBP is 100.00 EUR 
INFO  2018-08-23 11:25:41,964 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing/stream?instruments=EUR_USD HTTP/1.1
WARN  2018-08-23 11:25:42,782 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): {"errorMessage":"No such endpoint."}
WARN  2018-08-23 11:25:46,320 [HeartBeatMonitorThread] tradingAPI.heartbeat.AbstractHeartBeatService(run): heartbeat source DEMO_MKTDATASTREAM is not responding. just restarted it and will listen for heartbeat after 10000 ms
INFO  2018-08-23 11:25:46,324 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing/stream?instruments=EUR_USD HTTP/1.1
WARN  2018-08-23 11:25:46,883 [OandMarketDataStreamingThread] oandaAPI.streaming.OandaStreamingService(setUpStreamIfPossible): {"errorMessage":"No such endpoint."}
ERROR 2018-08-23 11:32:57,734 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): exception encountered whilst retrieving all instruments info
java.lang.IllegalArgumentException: Illegal character in path at index 0: <zzz>/v3/accounts/<zzz>/instruments
	at java.net.URI.create(URI.java:852)
	at org.apache.http.client.methods.HttpGet.<init>(HttpGet.java:66)
	at oandaAPI.instruments.OandaInstrumentDataProviderService.getInstruments(OandaInstrumentDataProviderService.java:56)
	at tradingAPI.instruments.InstrumentService.<init>(InstrumentService.java:19)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:170)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:117)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:271)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1138)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1065)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:584)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:91)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:373)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1344)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:144)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:85)
	at oandaAPI.tests.FadeTheMoveStrategyTest.main(FadeTheMoveStrategyTest.java:42)
Caused by: java.net.URISyntaxException: Illegal character in path at index 0: <zzz>/v3/accounts/<zzz>/instruments
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.checkChars(URI.java:3021)
	at java.net.URI$Parser.parseHierarchical(URI.java:3105)
	at java.net.URI$Parser.parse(URI.java:3063)
	at java.net.URI.<init>(URI.java:588)
	at java.net.URI.create(URI.java:850)
	... 37 more
ERROR 2018-08-23 11:32:58,150 [main] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): java.lang.IllegalArgumentException: Illegal character in path at index 0: <zzz>/v3/accounts/<zzz>/pricing?instruments=EUR_USD%2CAUD_JPY
INFO  2018-08-23 12:22:39,851 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/USD_CHF/candles?granularity=D&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=15 HTTP/1.1
INFO  2018-08-23 12:22:40,774 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): ++++++++++++++++++ Last 15 Candle Sticks with Daily Granularity for USD_CHF ++++++++++ 
INFO  2018-08-23 12:22:40,775 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99648, high=0.99682, low=0.99307,close=0.99526,date=2018-08-07T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99526, high=0.99708, low=0.99198,close=0.99332,date=2018-08-08T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99331, high=0.99513, low=0.98946,close=0.99402,date=2018-08-09T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99400, high=0.99754, low=0.99284,close=0.99512,date=2018-08-10T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99446, high=0.99530, low=0.99260,close=0.99442,date=2018-08-12T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99443, high=0.99543, low=0.99216,close=0.99342,date=2018-08-13T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99341, high=0.99509, low=0.99012,close=0.99426,date=2018-08-14T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99426, high=0.99829, low=0.99264,close=0.99344,date=2018-08-15T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99344, high=0.99750, low=0.99161,close=0.99736,date=2018-08-16T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99736, high=0.99776, low=0.99326,close=0.99580,date=2018-08-17T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99572, high=0.99574, low=0.99494,close=0.99534,date=2018-08-19T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99535, high=0.99686, low=0.99042,close=0.99044,date=2018-08-20T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.99050, high=0.99069, low=0.98427,close=0.98437,date=2018-08-21T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,781 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.98436, high=0.98538, low=0.98082,close=0.98336,date=2018-08-22T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,782 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=0.98332, high=0.98542, low=0.98258,close=0.98420,date=2018-08-23T00:00:00.000Z, instrument=TradeableInstrument [instrument=USD_CHF, description=null, instrumentId=null, pip=0.0], granularity=D
INFO  2018-08-23 12:22:40,786 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_AUD/candles?granularity=M&alignmentTimezone=GMT&from=2018-07-23T08:22:40.782Z&dailyAlignment=0&to=2018-08-23T08:22:40.782Z&price=M HTTP/1.1
INFO  2018-08-23 12:22:41,347 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): +++++++++++Candle Sticks From 2018-07-23T08:22:40.782Z To 2018-08-23T08:22:40.782Z with Monthly Granularity for GBP_AUD ++++++++++ 
INFO  2018-08-23 12:22:41,347 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.78055, high=1.79584, low=1.75683,close=1.77324,date=2018-06-30T00:00:00.000Z, instrument=TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=0.0], granularity=M
INFO  2018-08-23 12:22:41,347 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.77324, high=1.78253, low=1.72832,close=1.76340,date=2018-07-31T00:00:00.000Z, instrument=TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=0.0], granularity=M
INFO  2018-08-23 12:24:08,936 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/JPY_CHF/candles?granularity=M1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=150 HTTP/1.1
INFO  2018-08-23 12:24:09,739 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): ++++++++++++++++++ Last 0 Candle Sticks with Daily Granularity for JPY_CHF ++++++++++ 
INFO  2018-08-23 12:24:34,113 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_CHF/candles?granularity=M1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=150 HTTP/1.1
INFO  2018-08-23 12:24:35,074 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): ++++++++++++++++++ Last 150 Candle Sticks with Daily Granularity for EUR_CHF ++++++++++ 
INFO  2018-08-23 12:24:35,077 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13786, low=1.13769,close=1.13778,date=2018-08-23T06:55:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,081 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13790, low=1.13774,close=1.13790,date=2018-08-23T06:56:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,081 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13793, high=1.13793, low=1.13776,close=1.13778,date=2018-08-23T06:57:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,081 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13780, high=1.13790, low=1.13776,close=1.13778,date=2018-08-23T06:58:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,081 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13798, low=1.13772,close=1.13786,date=2018-08-23T06:59:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,081 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13795, low=1.13779,close=1.13790,date=2018-08-23T07:00:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,082 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13794, low=1.13781,close=1.13781,date=2018-08-23T07:01:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,083 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13818, low=1.13774,close=1.13810,date=2018-08-23T07:02:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,083 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13811, low=1.13789,close=1.13798,date=2018-08-23T07:03:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,083 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13818, low=1.13796,close=1.13810,date=2018-08-23T07:04:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,084 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13823, low=1.13807,close=1.13820,date=2018-08-23T07:05:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,084 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13818, high=1.13818, low=1.13798,close=1.13804,date=2018-08-23T07:06:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,084 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13806, high=1.13808, low=1.13796,close=1.13800,date=2018-08-23T07:07:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,084 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13803, high=1.13816, low=1.13803,close=1.13809,date=2018-08-23T07:08:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,085 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13811, high=1.13814, low=1.13798,close=1.13798,date=2018-08-23T07:09:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13808, low=1.13793,close=1.13800,date=2018-08-23T07:10:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13798, high=1.13816, low=1.13798,close=1.13804,date=2018-08-23T07:11:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13807, low=1.13790,close=1.13790,date=2018-08-23T07:12:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13790, low=1.13779,close=1.13783,date=2018-08-23T07:13:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13786, high=1.13805, low=1.13784,close=1.13788,date=2018-08-23T07:14:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,086 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13804, low=1.13762,close=1.13762,date=2018-08-23T07:15:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13764, high=1.13788, low=1.13764,close=1.13778,date=2018-08-23T07:16:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13800, low=1.13776,close=1.13792,date=2018-08-23T07:17:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13798, low=1.13789,close=1.13796,date=2018-08-23T07:18:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13794, high=1.13794, low=1.13780,close=1.13786,date=2018-08-23T07:19:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13789, high=1.13789, low=1.13768,close=1.13776,date=2018-08-23T07:20:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,087 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13778, low=1.13758,close=1.13762,date=2018-08-23T07:21:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,088 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13764, high=1.13766, low=1.13758,close=1.13759,date=2018-08-23T07:22:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,088 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13756, high=1.13768, low=1.13740,close=1.13742,date=2018-08-23T07:23:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13744, high=1.13744, low=1.13723,close=1.13728,date=2018-08-23T07:24:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13730, low=1.13726,close=1.13726,date=2018-08-23T07:25:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13728, high=1.13740, low=1.13728,close=1.13730,date=2018-08-23T07:26:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13728, high=1.13730, low=1.13728,close=1.13728,date=2018-08-23T07:27:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13731, high=1.13742, low=1.13731,close=1.13740,date=2018-08-23T07:28:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,089 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13742, high=1.13768, low=1.13735,close=1.13762,date=2018-08-23T07:29:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13760, high=1.13766, low=1.13736,close=1.13757,date=2018-08-23T07:30:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13760, high=1.13777, low=1.13758,close=1.13777,date=2018-08-23T07:31:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13786, low=1.13770,close=1.13780,date=2018-08-23T07:32:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13782, high=1.13786, low=1.13774,close=1.13774,date=2018-08-23T07:33:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13778, low=1.13756,close=1.13760,date=2018-08-23T07:34:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,090 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13762, high=1.13782, low=1.13761,close=1.13780,date=2018-08-23T07:35:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,091 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13782, low=1.13766,close=1.13766,date=2018-08-23T07:36:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,091 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13768, high=1.13772, low=1.13759,close=1.13772,date=2018-08-23T07:37:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,091 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13778, low=1.13770,close=1.13778,date=2018-08-23T07:38:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,091 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13780, high=1.13782, low=1.13770,close=1.13770,date=2018-08-23T07:39:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,091 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13772, high=1.13794, low=1.13770,close=1.13794,date=2018-08-23T07:40:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,092 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13796, low=1.13787,close=1.13792,date=2018-08-23T07:41:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,092 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13790, low=1.13779,close=1.13782,date=2018-08-23T07:42:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,092 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13779, high=1.13782, low=1.13774,close=1.13776,date=2018-08-23T07:43:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,092 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13782, low=1.13770,close=1.13777,date=2018-08-23T07:44:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,093 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13790, low=1.13773,close=1.13790,date=2018-08-23T07:45:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,093 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13797, low=1.13774,close=1.13779,date=2018-08-23T07:46:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,093 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13776, low=1.13774,close=1.13776,date=2018-08-23T07:47:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,093 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13788, low=1.13774,close=1.13786,date=2018-08-23T07:48:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13794, low=1.13784,close=1.13788,date=2018-08-23T07:49:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13798, low=1.13788,close=1.13798,date=2018-08-23T07:50:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13796, low=1.13775,close=1.13775,date=2018-08-23T07:51:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13773, high=1.13773, low=1.13756,close=1.13756,date=2018-08-23T07:52:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13758, high=1.13780, low=1.13758,close=1.13780,date=2018-08-23T07:53:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13790, low=1.13778,close=1.13784,date=2018-08-23T07:54:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13782, high=1.13794, low=1.13776,close=1.13790,date=2018-08-23T07:55:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,094 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13788, low=1.13764,close=1.13776,date=2018-08-23T07:56:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13776, low=1.13770,close=1.13770,date=2018-08-23T07:57:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13772, high=1.13782, low=1.13770,close=1.13772,date=2018-08-23T07:58:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13780, low=1.13773,close=1.13773,date=2018-08-23T07:59:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13770, high=1.13772, low=1.13738,close=1.13742,date=2018-08-23T08:00:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13744, high=1.13760, low=1.13744,close=1.13756,date=2018-08-23T08:01:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,095 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13753, high=1.13758, low=1.13746,close=1.13752,date=2018-08-23T08:02:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13750, high=1.13752, low=1.13714,close=1.13716,date=2018-08-23T08:03:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13743, low=1.13712,close=1.13724,date=2018-08-23T08:04:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13735, low=1.13723,close=1.13733,date=2018-08-23T08:05:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13731, high=1.13731, low=1.13716,close=1.13721,date=2018-08-23T08:06:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13723, high=1.13723, low=1.13712,close=1.13712,date=2018-08-23T08:07:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13715, high=1.13720, low=1.13707,close=1.13707,date=2018-08-23T08:08:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13709, high=1.13723, low=1.13709,close=1.13714,date=2018-08-23T08:09:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,096 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13710, high=1.13718, low=1.13694,close=1.13694,date=2018-08-23T08:10:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13697, high=1.13713, low=1.13692,close=1.13701,date=2018-08-23T08:11:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13704, high=1.13704, low=1.13680,close=1.13682,date=2018-08-23T08:12:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13680, high=1.13689, low=1.13667,close=1.13667,date=2018-08-23T08:13:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13670, high=1.13679, low=1.13665,close=1.13678,date=2018-08-23T08:14:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13676, high=1.13688, low=1.13672,close=1.13684,date=2018-08-23T08:15:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13682, high=1.13710, low=1.13682,close=1.13707,date=2018-08-23T08:16:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13705, high=1.13721, low=1.13705,close=1.13712,date=2018-08-23T08:17:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13724, low=1.13714,close=1.13724,date=2018-08-23T08:18:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,097 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13721, high=1.13721, low=1.13714,close=1.13716,date=2018-08-23T08:19:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13714, low=1.13702,close=1.13714,date=2018-08-23T08:20:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13717, high=1.13717, low=1.13705,close=1.13705,date=2018-08-23T08:21:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13702, high=1.13702, low=1.13686,close=1.13686,date=2018-08-23T08:22:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13688, high=1.13710, low=1.13688,close=1.13698,date=2018-08-23T08:23:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13700, high=1.13700, low=1.13688,close=1.13688,date=2018-08-23T08:24:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13691, high=1.13693, low=1.13688,close=1.13688,date=2018-08-23T08:25:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13690, high=1.13698, low=1.13678,close=1.13694,date=2018-08-23T08:26:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13692, high=1.13692, low=1.13676,close=1.13678,date=2018-08-23T08:27:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13681, high=1.13681, low=1.13672,close=1.13674,date=2018-08-23T08:28:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13672, high=1.13674, low=1.13660,close=1.13673,date=2018-08-23T08:29:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13671, high=1.13674, low=1.13664,close=1.13664,date=2018-08-23T08:30:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,098 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13661, high=1.13661, low=1.13647,close=1.13658,date=2018-08-23T08:31:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13656, high=1.13662, low=1.13654,close=1.13662,date=2018-08-23T08:32:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13660, high=1.13692, low=1.13653,close=1.13692,date=2018-08-23T08:33:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13695, high=1.13723, low=1.13695,close=1.13718,date=2018-08-23T08:34:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13716, high=1.13734, low=1.13716,close=1.13732,date=2018-08-23T08:35:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13730, high=1.13734, low=1.13727,close=1.13732,date=2018-08-23T08:36:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13734, high=1.13746, low=1.13734,close=1.13741,date=2018-08-23T08:37:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13739, high=1.13739, low=1.13723,close=1.13724,date=2018-08-23T08:38:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,099 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13726, low=1.13723,close=1.13724,date=2018-08-23T08:39:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13722, high=1.13725, low=1.13716,close=1.13722,date=2018-08-23T08:40:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13720, high=1.13729, low=1.13720,close=1.13724,date=2018-08-23T08:41:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13733, low=1.13718,close=1.13728,date=2018-08-23T08:42:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13731, high=1.13733, low=1.13726,close=1.13728,date=2018-08-23T08:43:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13742, low=1.13724,close=1.13736,date=2018-08-23T08:44:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,100 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13738, high=1.13738, low=1.13721,close=1.13724,date=2018-08-23T08:45:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13738, low=1.13726,close=1.13736,date=2018-08-23T08:46:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13733, high=1.13738, low=1.13728,close=1.13733,date=2018-08-23T08:47:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13735, high=1.13742, low=1.13732,close=1.13732,date=2018-08-23T08:48:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13730, high=1.13733, low=1.13712,close=1.13718,date=2018-08-23T08:49:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13721, high=1.13726, low=1.13709,close=1.13709,date=2018-08-23T08:50:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13712, high=1.13712, low=1.13697,close=1.13699,date=2018-08-23T08:51:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13697, high=1.13712, low=1.13696,close=1.13698,date=2018-08-23T08:52:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,101 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13700, high=1.13708, low=1.13698,close=1.13706,date=2018-08-23T08:53:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,102 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13708, high=1.13718, low=1.13708,close=1.13713,date=2018-08-23T08:54:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,102 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13711, high=1.13712, low=1.13702,close=1.13704,date=2018-08-23T08:55:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,102 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13701, high=1.13701, low=1.13694,close=1.13696,date=2018-08-23T08:56:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,102 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13694, high=1.13694, low=1.13674,close=1.13678,date=2018-08-23T08:57:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,102 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13676, high=1.13678, low=1.13671,close=1.13676,date=2018-08-23T08:58:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,103 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13678, high=1.13678, low=1.13666,close=1.13666,date=2018-08-23T08:59:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,103 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13664, high=1.13692, low=1.13653,close=1.13654,date=2018-08-23T09:00:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,103 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13656, high=1.13686, low=1.13651,close=1.13668,date=2018-08-23T09:01:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,103 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13670, high=1.13692, low=1.13668,close=1.13687,date=2018-08-23T09:02:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,103 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13684, high=1.13689, low=1.13673,close=1.13682,date=2018-08-23T09:03:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13680, high=1.13684, low=1.13668,close=1.13671,date=2018-08-23T09:04:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13668, high=1.13698, low=1.13666,close=1.13696,date=2018-08-23T09:05:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13694, high=1.13694, low=1.13682,close=1.13687,date=2018-08-23T09:06:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13684, high=1.13689, low=1.13680,close=1.13685,date=2018-08-23T09:07:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13682, high=1.13688, low=1.13679,close=1.13679,date=2018-08-23T09:08:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13676, high=1.13677, low=1.13666,close=1.13674,date=2018-08-23T09:09:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,104 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13676, high=1.13686, low=1.13674,close=1.13686,date=2018-08-23T09:10:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13688, high=1.13698, low=1.13676,close=1.13686,date=2018-08-23T09:11:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13688, high=1.13695, low=1.13684,close=1.13686,date=2018-08-23T09:12:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13689, high=1.13692, low=1.13682,close=1.13682,date=2018-08-23T09:13:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13684, high=1.13698, low=1.13684,close=1.13698,date=2018-08-23T09:14:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13701, high=1.13713, low=1.13701,close=1.13708,date=2018-08-23T09:15:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,105 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13706, high=1.13712, low=1.13704,close=1.13712,date=2018-08-23T09:16:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13710, high=1.13712, low=1.13702,close=1.13706,date=2018-08-23T09:17:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13708, high=1.13718, low=1.13706,close=1.13715,date=2018-08-23T09:18:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13718, high=1.13720, low=1.13711,close=1.13720,date=2018-08-23T09:19:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13722, high=1.13722, low=1.13716,close=1.13716,date=2018-08-23T09:20:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13715, low=1.13708,close=1.13708,date=2018-08-23T09:21:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13706, high=1.13722, low=1.13706,close=1.13722,date=2018-08-23T09:22:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13720, high=1.13720, low=1.13704,close=1.13706,date=2018-08-23T09:23:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:35,106 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13708, high=1.13710, low=1.13704,close=1.13706,date=2018-08-23T09:24:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:24:44,996 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_CHF/candles?granularity=M1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=150 HTTP/1.1
INFO  2018-08-23 12:24:52,736 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): ++++++++++++++++++ Last 150 Candle Sticks with Daily Granularity for EUR_CHF ++++++++++ 
INFO  2018-08-23 12:59:19,750 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13786, low=1.13769,close=1.13778,date=2018-08-23T06:55:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,766 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13790, low=1.13774,close=1.13790,date=2018-08-23T06:56:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,766 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13793, high=1.13793, low=1.13776,close=1.13778,date=2018-08-23T06:57:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,766 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13780, high=1.13790, low=1.13776,close=1.13778,date=2018-08-23T06:58:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,767 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13798, low=1.13772,close=1.13786,date=2018-08-23T06:59:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,767 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13795, low=1.13779,close=1.13790,date=2018-08-23T07:00:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,769 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13794, low=1.13781,close=1.13781,date=2018-08-23T07:01:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,770 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13818, low=1.13774,close=1.13810,date=2018-08-23T07:02:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,770 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13811, low=1.13789,close=1.13798,date=2018-08-23T07:03:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,771 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13818, low=1.13796,close=1.13810,date=2018-08-23T07:04:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,771 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13823, low=1.13807,close=1.13820,date=2018-08-23T07:05:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,772 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13818, high=1.13818, low=1.13798,close=1.13804,date=2018-08-23T07:06:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,772 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13806, high=1.13808, low=1.13796,close=1.13800,date=2018-08-23T07:07:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,772 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13803, high=1.13816, low=1.13803,close=1.13809,date=2018-08-23T07:08:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13811, high=1.13814, low=1.13798,close=1.13798,date=2018-08-23T07:09:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,779 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13808, low=1.13793,close=1.13800,date=2018-08-23T07:10:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13798, high=1.13816, low=1.13798,close=1.13804,date=2018-08-23T07:11:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,780 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13807, high=1.13807, low=1.13790,close=1.13790,date=2018-08-23T07:12:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,781 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13790, low=1.13779,close=1.13783,date=2018-08-23T07:13:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,781 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13786, high=1.13805, low=1.13784,close=1.13788,date=2018-08-23T07:14:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,781 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13804, low=1.13762,close=1.13762,date=2018-08-23T07:15:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,782 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13764, high=1.13788, low=1.13764,close=1.13778,date=2018-08-23T07:16:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,782 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13800, low=1.13776,close=1.13792,date=2018-08-23T07:17:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,783 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13798, low=1.13789,close=1.13796,date=2018-08-23T07:18:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,783 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13794, high=1.13794, low=1.13780,close=1.13786,date=2018-08-23T07:19:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,783 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13789, high=1.13789, low=1.13768,close=1.13776,date=2018-08-23T07:20:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,786 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13778, low=1.13758,close=1.13762,date=2018-08-23T07:21:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,787 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13764, high=1.13766, low=1.13758,close=1.13759,date=2018-08-23T07:22:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,787 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13756, high=1.13768, low=1.13740,close=1.13742,date=2018-08-23T07:23:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,787 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13744, high=1.13744, low=1.13723,close=1.13728,date=2018-08-23T07:24:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,788 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13730, low=1.13726,close=1.13726,date=2018-08-23T07:25:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,788 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13728, high=1.13740, low=1.13728,close=1.13730,date=2018-08-23T07:26:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,789 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13728, high=1.13730, low=1.13728,close=1.13728,date=2018-08-23T07:27:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,789 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13731, high=1.13742, low=1.13731,close=1.13740,date=2018-08-23T07:28:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,789 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13742, high=1.13768, low=1.13735,close=1.13762,date=2018-08-23T07:29:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,789 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13760, high=1.13766, low=1.13736,close=1.13757,date=2018-08-23T07:30:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,789 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13760, high=1.13777, low=1.13758,close=1.13777,date=2018-08-23T07:31:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,790 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13786, low=1.13770,close=1.13780,date=2018-08-23T07:32:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,790 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13782, high=1.13786, low=1.13774,close=1.13774,date=2018-08-23T07:33:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,791 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13778, low=1.13756,close=1.13760,date=2018-08-23T07:34:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,791 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13762, high=1.13782, low=1.13761,close=1.13780,date=2018-08-23T07:35:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,791 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13782, low=1.13766,close=1.13766,date=2018-08-23T07:36:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,791 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13768, high=1.13772, low=1.13759,close=1.13772,date=2018-08-23T07:37:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,792 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13778, low=1.13770,close=1.13778,date=2018-08-23T07:38:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,792 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13780, high=1.13782, low=1.13770,close=1.13770,date=2018-08-23T07:39:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,792 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13772, high=1.13794, low=1.13770,close=1.13794,date=2018-08-23T07:40:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,792 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13796, low=1.13787,close=1.13792,date=2018-08-23T07:41:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,793 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13790, low=1.13779,close=1.13782,date=2018-08-23T07:42:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,793 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13779, high=1.13782, low=1.13774,close=1.13776,date=2018-08-23T07:43:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,793 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13782, low=1.13770,close=1.13777,date=2018-08-23T07:44:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,793 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13790, low=1.13773,close=1.13790,date=2018-08-23T07:45:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,794 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13792, high=1.13797, low=1.13774,close=1.13779,date=2018-08-23T07:46:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,794 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13776, high=1.13776, low=1.13774,close=1.13776,date=2018-08-23T07:47:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,794 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13788, low=1.13774,close=1.13786,date=2018-08-23T07:48:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,795 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13794, low=1.13784,close=1.13788,date=2018-08-23T07:49:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,799 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13790, high=1.13798, low=1.13788,close=1.13798,date=2018-08-23T07:50:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,799 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13796, high=1.13796, low=1.13775,close=1.13775,date=2018-08-23T07:51:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,799 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13773, high=1.13773, low=1.13756,close=1.13756,date=2018-08-23T07:52:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,800 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13758, high=1.13780, low=1.13758,close=1.13780,date=2018-08-23T07:53:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,801 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13778, high=1.13790, low=1.13778,close=1.13784,date=2018-08-23T07:54:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,801 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13782, high=1.13794, low=1.13776,close=1.13790,date=2018-08-23T07:55:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,802 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13788, high=1.13788, low=1.13764,close=1.13776,date=2018-08-23T07:56:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,803 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13774, high=1.13776, low=1.13770,close=1.13770,date=2018-08-23T07:57:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,803 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13772, high=1.13782, low=1.13770,close=1.13772,date=2018-08-23T07:58:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,804 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13775, high=1.13780, low=1.13773,close=1.13773,date=2018-08-23T07:59:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,804 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13770, high=1.13772, low=1.13738,close=1.13742,date=2018-08-23T08:00:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,804 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13744, high=1.13760, low=1.13744,close=1.13756,date=2018-08-23T08:01:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,805 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13753, high=1.13758, low=1.13746,close=1.13752,date=2018-08-23T08:02:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,805 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13750, high=1.13752, low=1.13714,close=1.13716,date=2018-08-23T08:03:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,805 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13743, low=1.13712,close=1.13724,date=2018-08-23T08:04:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,805 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13726, high=1.13735, low=1.13723,close=1.13733,date=2018-08-23T08:05:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,805 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13731, high=1.13731, low=1.13716,close=1.13721,date=2018-08-23T08:06:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,806 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13723, high=1.13723, low=1.13712,close=1.13712,date=2018-08-23T08:07:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,806 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13715, high=1.13720, low=1.13707,close=1.13707,date=2018-08-23T08:08:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,806 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13709, high=1.13723, low=1.13709,close=1.13714,date=2018-08-23T08:09:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,806 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13710, high=1.13718, low=1.13694,close=1.13694,date=2018-08-23T08:10:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,807 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13697, high=1.13713, low=1.13692,close=1.13701,date=2018-08-23T08:11:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,807 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13704, high=1.13704, low=1.13680,close=1.13682,date=2018-08-23T08:12:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,807 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13680, high=1.13689, low=1.13667,close=1.13667,date=2018-08-23T08:13:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13670, high=1.13679, low=1.13665,close=1.13678,date=2018-08-23T08:14:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13676, high=1.13688, low=1.13672,close=1.13684,date=2018-08-23T08:15:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13682, high=1.13710, low=1.13682,close=1.13707,date=2018-08-23T08:16:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13705, high=1.13721, low=1.13705,close=1.13712,date=2018-08-23T08:17:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13724, low=1.13714,close=1.13724,date=2018-08-23T08:18:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13721, high=1.13721, low=1.13714,close=1.13716,date=2018-08-23T08:19:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,808 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13714, high=1.13714, low=1.13702,close=1.13714,date=2018-08-23T08:20:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,809 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13717, high=1.13717, low=1.13705,close=1.13705,date=2018-08-23T08:21:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,809 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13702, high=1.13702, low=1.13686,close=1.13686,date=2018-08-23T08:22:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 12:59:19,809 [main] oandaAPI.tests.HistoricMarketDataProviderTest(testHistoricDataProvider): Open=1.13688, high=1.13710, low=1.13688,close=1.13698,date=2018-08-23T08:23:00.000Z, instrument=TradeableInstrument [instrument=EUR_CHF, description=null, instrumentId=null, pip=0.0], granularity=M1
INFO  2018-08-23 13:22:07,761 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:22:08,934 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:22:09,916 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:22:09,923 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:22:09,926 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:22:10,138 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:22:10,152 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:22:10,664 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:22:10,666 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:22:11,195 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:22:11,196 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:22:11,196 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:22:11,322 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:22:11,324 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 13:22:11,843 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 13:22:11,843 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:22:11,846 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:22:12,355 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:22:12,355 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:22:12,356 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:22:12,488 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:22:12,491 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:22:12,999 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:22:13,002 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:22:13,514 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:22:13,514 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:22:13,515 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:22:13,645 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:22:13,648 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:22:14,156 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for USD = 0
INFO  2018-08-23 13:22:14,156 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for GBP = 0
INFO  2018-08-23 13:22:14,157 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:22:14,158 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:22:14,687 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:22:14,687 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:22:14,687 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:22:14,816 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:22:14,828 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:22:15,360 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders ++++++++
INFO  2018-08-23 13:23:31,647 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:23:32,990 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:23:33,865 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:23:33,874 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:23:33,874 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:23:34,075 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:23:34,083 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:23:34,592 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:23:34,596 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:23:35,141 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:23:35,141 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:23:35,141 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:23:35,271 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:23:35,274 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 13:24:28,155 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 13:24:28,156 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:24:28,162 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:24:52,645 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:24:54,568 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:24:58,648 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:24:58,670 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:24:58,671 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:24:59,007 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:24:59,033 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:25:25,388 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:25:25,410 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:25:26,156 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:25:26,157 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:25:26,158 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:25:26,299 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:25:26,321 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 13:46:45,442 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 13:46:58,626 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:46:58,665 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:48:04,335 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:48:04,980 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:48:05,739 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:48:05,747 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:48:05,747 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:48:05,947 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:48:33,424 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 13:48:33,968 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:48:33,971 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:48:34,491 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:48:34,491 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:48:34,491 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:48:34,624 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:48:57,052 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 13:50:03,544 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 13:50:03,544 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:50:03,550 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:50:05,939 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 13:50:07,015 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 13:50:07,753 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 13:50:07,761 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 13:50:07,762 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 13:50:07,953 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 13:50:54,522 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:05:22,085 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:05:22,091 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:05:22,721 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:05:22,721 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:05:22,721 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:05:22,851 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:05:32,286 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:05:35,670 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 14:05:46,710 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:05:46,736 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:05:47,497 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:05:47,498 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:05:47,498 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:05:47,638 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:05:55,536 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:05:56,048 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:05:56,051 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:05:56,586 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:05:56,586 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:05:56,586 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:05:56,715 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:05:56,718 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:05:57,251 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for USD = 0
INFO  2018-08-23 14:05:57,251 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for GBP = 0
INFO  2018-08-23 14:05:57,251 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:05:57,261 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:05:57,785 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:05:57,786 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:05:57,786 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:05:57,917 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:05:57,921 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:05:58,427 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders ++++++++
INFO  2018-08-23 14:08:03,452 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_NZD/candles?granularity=H1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=30 HTTP/1.1
INFO  2018-08-23 14:08:53,088 [main] oandaAPI.tests.MovingAverageTest(testMA): SMA=1.73159,WMA=1.73213 for instrument=EUR_NZD,granularity=H1 for the last 30 intervals
INFO  2018-08-23 14:09:16,894 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_CHF/candles?granularity=W&alignmentTimezone=GMT&from=2018-06-23T10:09:02.626Z&dailyAlignment=0&to=2018-08-23T10:09:02.626Z&price=M HTTP/1.1
INFO  2018-08-23 14:09:28,915 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_NZD/candles?granularity=H1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=30 HTTP/1.1
INFO  2018-08-23 14:11:45,418 [main] oandaAPI.tests.MovingAverageTest(testMA): SMA=1.73158,WMA=1.73212 for instrument=EUR_NZD,granularity=H1 for the last 30 intervals
INFO  2018-08-23 14:11:45,423 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_CHF/candles?granularity=W&alignmentTimezone=GMT&from=2018-06-23T10:11:45.419Z&dailyAlignment=0&to=2018-08-23T10:11:45.419Z&price=M HTTP/1.1
INFO  2018-08-23 14:11:46,082 [main] oandaAPI.tests.MovingAverageTest(testMA): SMA=1.29434,WMA=1.28585 for instrument=GBP_CHF,granularity=W from 2018-06-23T10:11:45.419Z to 2018-08-23T10:11:45.419Z
INFO  2018-08-23 14:11:53,512 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_NZD/candles?granularity=H1&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=30 HTTP/1.1
INFO  2018-08-23 14:12:11,155 [main] oandaAPI.tests.MovingAverageTest(testMA): SMA=1.73157,WMA=1.73209 for instrument=EUR_NZD,granularity=H1 for the last 30 intervals
INFO  2018-08-23 14:12:11,160 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_CHF/candles?granularity=W&alignmentTimezone=GMT&from=2018-06-23T10:12:11.156Z&dailyAlignment=0&to=2018-08-23T10:12:11.156Z&price=M HTTP/1.1
INFO  2018-08-23 14:13:48,511 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:13:49,382 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:13:50,160 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:13:50,166 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:13:50,169 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:13:50,356 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:13:50,366 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:13:50,377 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:13:50,999 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:13:51,000 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:13:51,000 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:13:51,151 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:13:51,155 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:13:51,669 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:13:51,672 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:13:52,291 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:13:52,292 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:13:52,292 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:13:52,442 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:13:52,445 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:13:52,955 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:13:52,957 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:13:53,473 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:13:53,473 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:13:53,473 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:13:53,600 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:13:53,603 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:13:54,110 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=GBP_USD HTTP/1.1
INFO  2018-08-23 14:13:54,723 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): ASK OBject:  {"price":"1.28943","liquidity":10000000}
INFO  2018-08-23 14:13:54,735 [OrderExecutionService] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_USD/candles?granularity=M&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=60 HTTP/1.1
INFO  2018-08-23 14:13:55,305 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Executing request : POST https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders HTTP/1.1
INFO  2018-08-23 14:13:55,874 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Order executed->{"orderCreateTransaction":{"type":"LIMIT_ORDER","instrument":"GBP_USD","units":"10","price":"1.40000","timeInForce":"GTC","triggerCondition":"DEFAULT","partialFill":"DEFAULT","positionFill":"DEFAULT","takeProfitOnFill":{"price":"1.44000","timeInForce":"GTC"},"stopLossOnFill":{"price":"1.35000","timeInForce":"GTC"},"reason":"CLIENT_ORDER","id":"68","accountID":"101-004-7750633-001","userID":7750633,"batchID":"68","requestID":"78495946442508950","time":"2018-08-23T11:13:52.334715802Z"},"orderCancelTransaction":{"type":"ORDER_CANCEL","orderID":"68","reason":"STOP_LOSS_ON_FILL_LOSS","id":"69","accountID":"101-004-7750633-001","userID":7750633,"batchID":"68","requestID":"78495946442508950","time":"2018-08-23T11:13:52.334715802Z"},"relatedTransactionIDs":["68","69"],"lastTransactionID":"69"}
INFO  2018-08-23 14:13:55,874 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:13:55,877 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:13:56,393 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:13:56,393 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:13:56,393 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:13:56,525 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:46,646 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:14:47,485 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:14:48,312 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:14:48,318 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:14:48,322 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:14:48,504 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:48,512 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:14:49,055 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:14:49,058 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:14:49,671 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:14:49,672 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:14:49,672 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:14:49,816 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:49,819 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:14:50,339 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 14:14:50,339 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:14:50,342 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:14:50,906 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:14:50,906 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:14:50,906 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:14:51,039 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:51,043 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:14:51,590 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:14:51,592 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:14:52,144 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:14:52,144 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:14:52,144 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:14:52,285 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:52,288 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:14:52,807 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for USD = 0
INFO  2018-08-23 14:14:52,807 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for GBP = 0
INFO  2018-08-23 14:14:52,807 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:14:52,809 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:14:53,338 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:14:53,338 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:14:53,338 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:14:53,470 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:14:53,482 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:14:55,217 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders ++++++++
INFO  2018-08-23 14:15:22,221 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:15:23,364 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:15:24,217 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:15:24,228 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:15:24,228 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:15:24,424 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:15:24,435 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:15:24,949 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:15:24,952 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:15:25,476 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:15:25,477 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:15:25,477 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:15:25,606 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:15:25,609 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:15:26,144 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 14:15:26,144 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:15:26,148 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:15:26,698 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:15:26,699 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:15:26,699 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:15:26,831 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:15:26,834 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:15:27,368 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:15:27,370 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:15:27,918 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:15:27,918 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:15:27,918 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:15:28,049 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:15:28,051 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:15:28,562 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for USD = 0
INFO  2018-08-23 14:15:28,562 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for GBP = 0
INFO  2018-08-23 14:15:28,562 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:15:28,564 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:15:29,083 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:15:29,083 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:15:29,084 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:15:29,213 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:15:29,216 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:15:29,726 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders ++++++++
INFO  2018-08-23 14:29:24,858 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:29:25,847 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:29:26,677 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:29:26,684 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:29:26,686 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:29:26,877 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:29:26,886 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:29:26,890 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:29:27,414 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:29:27,414 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:29:27,415 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:29:27,545 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:29:27,549 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:29:28,070 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:29:28,072 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:29:28,635 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:29:28,635 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:29:28,636 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:29:28,781 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:29:28,784 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:29:29,293 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:29:29,295 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:29:29,847 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:29:29,847 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:29:29,847 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:29:29,979 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:29:29,982 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:29:30,512 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=GBP_USD HTTP/1.1
INFO  2018-08-23 14:29:31,120 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): ASK OBject:  {"price":"1.28961","liquidity":10000000}
INFO  2018-08-23 14:29:31,124 [OrderExecutionService] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_USD/candles?granularity=M&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=60 HTTP/1.1
INFO  2018-08-23 14:29:31,676 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Executing request : POST https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders HTTP/1.1
INFO  2018-08-23 14:29:32,189 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Order executed->{"orderCreateTransaction":{"type":"LIMIT_ORDER","instrument":"GBP_USD","units":"10","price":"1.40000","timeInForce":"GTC","triggerCondition":"DEFAULT","partialFill":"DEFAULT","positionFill":"DEFAULT","takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"stopLossOnFill":{"price":"1.30000","timeInForce":"GTC"},"reason":"CLIENT_ORDER","id":"70","accountID":"101-004-7750633-001","userID":7750633,"batchID":"70","requestID":"60481551860284454","time":"2018-08-23T11:29:28.656251834Z"},"orderCancelTransaction":{"type":"ORDER_CANCEL","orderID":"70","reason":"STOP_LOSS_ON_FILL_LOSS","id":"71","accountID":"101-004-7750633-001","userID":7750633,"batchID":"70","requestID":"60481551860284454","time":"2018-08-23T11:29:28.656251834Z"},"relatedTransactionIDs":["70","71"],"lastTransactionID":"71"}
INFO  2018-08-23 14:29:32,190 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:29:32,192 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:29:32,731 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:29:32,731 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:29:32,732 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:29:32,863 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:30:43,614 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:30:44,491 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:30:45,271 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:30:45,277 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:30:45,280 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:30:45,466 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:30:45,472 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:30:45,476 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:30:46,017 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:30:46,018 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:30:46,018 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:30:46,148 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:30:46,152 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:30:46,661 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:30:46,664 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:30:47,281 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:30:47,282 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:30:47,282 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:30:47,453 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:30:47,455 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:30:48,037 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:30:48,039 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:30:48,658 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:30:48,658 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:30:48,658 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:30:48,901 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:30:48,903 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:30:49,560 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pricing?instruments=GBP_USD HTTP/1.1
INFO  2018-08-23 14:30:50,402 [OrderExecutionService] oandaAPI.market.OandaCurrentPriceInfoProvider(getCurrentPricesForInstruments): ASK OBject:  {"price":"1.28948","liquidity":10000000}
INFO  2018-08-23 14:30:50,406 [OrderExecutionService] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/GBP_USD/candles?granularity=M&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=60 HTTP/1.1
INFO  2018-08-23 14:30:50,959 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Executing request : POST https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders HTTP/1.1
INFO  2018-08-23 14:30:51,567 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(placeOrder): Order executed->{"orderCreateTransaction":{"type":"LIMIT_ORDER","instrument":"GBP_USD","units":"10","price":"1.28000","timeInForce":"GTC","triggerCondition":"DEFAULT","partialFill":"DEFAULT","positionFill":"DEFAULT","takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"reason":"CLIENT_ORDER","id":"72","accountID":"101-004-7750633-001","userID":7750633,"batchID":"72","requestID":"60481552195943045","time":"2018-08-23T11:30:48.033261564Z"},"relatedTransactionIDs":["72"],"lastTransactionID":"72"}
INFO  2018-08-23 14:30:51,567 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:30:51,570 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:30:52,104 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:30:52,104 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:30:52,104 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:30:52,232 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:30,895 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:31,704 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:32,528 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:32,534 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:32,537 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:32,743 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:32,753 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:32,757 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:33,277 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:33,277 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:33,278 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:33,410 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:33,414 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:31:33,945 [OrderExecutionService] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
WARN  2018-08-23 14:31:33,947 [OrderExecutionService] tradingAPI.order.PreOrderValidationService(checkInstrumentNotAlreadyTraded): Pending order with instrument GBP_USD already exists
INFO  2018-08-23 14:31:33,947 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:33,951 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:34,526 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:34,526 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:34,526 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:34,667 [OrderExecutionService] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:49,390 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:50,275 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:51,128 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:51,135 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:51,138 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:51,322 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:51,327 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:31:51,865 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 14:31:51,867 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:51,869 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:52,389 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:52,389 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:52,389 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:52,519 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:52,522 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=GBP_USD HTTP/1.1
INFO  2018-08-23 14:31:53,035 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 14:31:53,036 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders for GBP_USD +++
INFO  2018-08-23 14:31:53,036 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): units=10, takeprofit=1.48000,stoploss=1.20000,limitprice=1.28000,side=LONG
INFO  2018-08-23 14:31:53,036 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:53,038 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:53,590 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:53,591 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:53,591 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:53,723 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:53,727 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:31:54,262 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 14:31:54,266 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:54,268 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:54,804 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:54,804 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:54,804 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:54,948 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:54,950 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:31:55,470 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 14:31:55,472 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for USD = -1
INFO  2018-08-23 14:31:55,472 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): Net Position count for GBP = 1
INFO  2018-08-23 14:31:55,472 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 14:31:55,473 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 14:31:56,032 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 14:31:56,032 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 14:31:56,032 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 14:31:56,174 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 14:31:56,177 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 14:31:56,684 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 14:31:56,684 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): +++++++++++++++++++ Dumping all pending orders ++++++++
INFO  2018-08-23 14:31:56,684 [main] oandaAPI.tests.OrderInfoServiceTest(testOrderInfo): instrument=GBP_USD,units=10, takeprofit=1.48000,stoploss=1.20000,limitprice=1.28000,side=LONG
INFO  2018-08-23 15:27:22,764 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:27:23,623 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:27:24,492 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:27:24,499 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:27:24,502 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:27:24,680 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:27:24,686 [main] oandaAPI.trade.OandaTradeManagementProvider(getTradesForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/trades HTTP/1.1
INFO  2018-08-23 15:27:25,251 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:27:25,255 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:27:25,786 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:27:25,786 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:27:25,786 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:27:25,917 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:27:25,920 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=EUR_USD HTTP/1.1
INFO  2018-08-23 15:27:26,447 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:27:26,449 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:27:26,972 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:27:26,973 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:27:26,973 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:27:27,115 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:27:27,118 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/orders?instrument=USD_JPY HTTP/1.1
INFO  2018-08-23 15:27:27,648 [main] oandaAPI.tests.PreValidationServiceTest(testValidation): EUR_USD trade present? false
INFO  2018-08-23 15:27:27,649 [main] oandaAPI.tests.PreValidationServiceTest(testValidation): USD_JPY trade present? false
INFO  2018-08-23 15:27:27,652 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/USD_ZAR/candles?granularity=M&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=60 HTTP/1.1
INFO  2018-08-23 15:27:28,272 [main] tradingAPI.order.PreOrderValidationService(isInSafeZone): Rejecting LONG  USD_ZAR because price 17.90000 is 10pct on either side of wma 10yr price of 13.22227
INFO  2018-08-23 15:27:28,272 [main] oandaAPI.tests.PreValidationServiceTest(testValidation): USD_ZAR in safe zone? false
INFO  2018-08-23 15:27:28,274 [main] oandaAPI.marketData.OandaHistoricMarketDataProvider(getCandleSticks): Executing request : GET https://api-fxpractice.oanda.com/v3/instruments/EUR_USD/candles?granularity=M&alignmentTimezone=GMT&dailyAlignment=0&price=M&count=60 HTTP/1.1
INFO  2018-08-23 15:27:28,822 [main] tradingAPI.order.PreOrderValidationService(isInSafeZone): Rejecting LONG  EUR_USD because price 1.20000 is 10pct on either side of wma 10yr price of 1.15265
INFO  2018-08-23 15:27:28,822 [main] oandaAPI.tests.PreValidationServiceTest(testValidation): EUR_USD in safe zone? false
INFO  2018-08-23 15:27:28,827 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:27:28,829 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:27:29,362 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:27:29,362 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:27:29,362 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:27:29,498 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:27:29,500 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 15:27:30,023 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 15:27:30,025 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:27:30,027 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:27:30,564 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:27:30,564 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:27:30,564 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:27:30,696 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:27:30,698 [main] oandaAPI.order.OandaOrderManagementProvider(pendingOrdersForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/pendingOrders HTTP/1.1
INFO  2018-08-23 15:27:31,214 [main] oandaAPI.order.OandaOrderManagementProvider(parseOrder): Parsing order... {"triggerCondition":"DEFAULT","stopLossOnFill":{"price":"1.20000","timeInForce":"GTC"},"takeProfitOnFill":{"price":"1.48000","timeInForce":"GTC"},"instrument":"GBP_USD","units":"10","type":"LIMIT","positionFill":"DEFAULT","partialFill":"DEFAULT_FILL","createTime":"2018-08-23T11:30:48.033261564Z","price":"1.28000","id":"72","state":"PENDING","timeInForce":"GTC"}
INFO  2018-08-23 15:38:34,579 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Entering method getLatestAccountsInfo in OADPS
INFO  2018-08-23 15:38:35,499 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts HTTP/1.1
INFO  2018-08-23 15:38:36,372 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): {"accounts":[{"id":"101-004-7750633-001","tags":[]}]}
INFO  2018-08-23 15:38:36,378 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): Got ID 101-004-7750633-001
INFO  2018-08-23 15:38:36,382 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountInfo): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001 HTTP/1.1
INFO  2018-08-23 15:38:36,555 [main] oandaAPI.account.OandaAccountDataProviderService(getLatestAccountsInfo): ID: 101-004-7750633-001 Currency: EUR
INFO  2018-08-23 15:38:36,559 [main] oandaAPI.trade.OandaTradeManagementProvider(getTradesForAccount): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/trades HTTP/1.1
INFO  2018-08-23 15:38:37,065 [main] oandaAPI.tests.TradeInfoServiceTest(tradeInfoServiceTest): ################ Dumping All Trades ################
INFO  2018-08-23 15:38:37,066 [main] oandaAPI.tests.TradeInfoServiceTest(tradeInfoServiceTest): Net Position for GBP = 0
INFO  2018-08-23 15:38:37,066 [main] oandaAPI.tests.TradeInfoServiceTest(tradeInfoServiceTest): Net Position for USD = 0
INFO  2018-08-23 15:38:37,066 [main] oandaAPI.tests.TradeInfoServiceTest(tradeInfoServiceTest): GBP_USD exists?false
INFO  2018-08-23 15:38:37,067 [main] oandaAPI.tests.TradeInfoServiceTest(tradeInfoServiceTest): EUR_USD exists?false
INFO  2018-08-23 16:35:20,286 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/instruments HTTP/1.1
INFO  2018-08-23 16:35:21,334 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): {"instruments":[{"name":"USD_MXN","type":"CURRENCY","displayName":"USD/MXN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_USD","type":"CURRENCY","displayName":"GBP/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SGD","type":"CURRENCY","displayName":"USD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_SEK","type":"CURRENCY","displayName":"EUR/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AU200_AUD","type":"CFD","displayName":"Australia 200","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_CHF","type":"CURRENCY","displayName":"EUR/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CAD","type":"CURRENCY","displayName":"NZD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_JPY","type":"METAL","displayName":"Gold/JPY","pipLocation":1,"displayPrecision":0,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100000","minimumTrailingStopDistance":"50","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB30Y_USD","type":"CFD","displayName":"US T-Bond","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_CAD","type":"METAL","displayName":"Silver/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_SGD","type":"CURRENCY","displayName":"EUR/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_AUD","type":"METAL","displayName":"Gold/AUD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CAD_CHF","type":"CURRENCY","displayName":"CAD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_INR","type":"CURRENCY","displayName":"USD/INR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_SGD","type":"CURRENCY","displayName":"AUD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_CAD","type":"CURRENCY","displayName":"AUD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_SGD","type":"METAL","displayName":"Gold/SGD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CORN_USD","type":"CFD","displayName":"Corn","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"XPD_USD","type":"METAL","displayName":"Palladium","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_SGD","type":"METAL","displayName":"Silver/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB05Y_USD","type":"CFD","displayName":"US 5Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"CAD_HKD","type":"CURRENCY","displayName":"CAD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SUGAR_USD","type":"CFD","displayName":"Sugar","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"40000000","marginRate":"0.033333"},{"name":"XAU_CHF","type":"METAL","displayName":"Gold/CHF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NATGAS_USD","type":"CFD","displayName":"Natural Gas","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.02"},{"name":"USD_ZAR","type":"CURRENCY","displayName":"USD/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_GBP","type":"CURRENCY","displayName":"EUR/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SEK","type":"CURRENCY","displayName":"USD/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_SGD","type":"CURRENCY","displayName":"GBP/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HKD","type":"CURRENCY","displayName":"USD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"US2000_USD","type":"CFD","displayName":"US Russ 2000","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"10000","marginRate":"0.02"},{"name":"GBP_PLN","type":"CURRENCY","displayName":"GBP/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_CHF","type":"CURRENCY","displayName":"AUD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_TRY","type":"CURRENCY","displayName":"USD/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_JPY","type":"CURRENCY","displayName":"GBP/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"HK33_HKD","type":"CFD","displayName":"Hong Kong 33","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_CAD","type":"CURRENCY","displayName":"EUR/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_ZAR","type":"CURRENCY","displayName":"CHF/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"WHEAT_USD","type":"CFD","displayName":"Wheat","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"EUR_CZK","type":"CURRENCY","displayName":"EUR/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_JPY","type":"CURRENCY","displayName":"EUR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SOYBN_USD","type":"CFD","displayName":"Soybeans","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"600000","marginRate":"0.033333"},{"name":"XAG_CHF","type":"METAL","displayName":"Silver/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"GBP_ZAR","type":"CURRENCY","displayName":"GBP/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_SGD","type":"CURRENCY","displayName":"CAD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_NOK","type":"CURRENCY","displayName":"USD/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_CAD","type":"CURRENCY","displayName":"GBP/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SAR","type":"CURRENCY","displayName":"USD/SAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_JPY","type":"CURRENCY","displayName":"CAD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_USD","type":"CURRENCY","displayName":"EUR/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SPX500_USD","type":"CFD","displayName":"US SPX 500","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"8000","marginRate":"0.02"},{"name":"EU50_EUR","type":"CFD","displayName":"Europe 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"UK100_GBP","type":"CFD","displayName":"UK 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"500","marginRate":"0.02"},{"name":"XAU_EUR","type":"METAL","displayName":"Gold/EUR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"SG30_SGD","type":"CFD","displayName":"Singapore 30","pipLocation":-1,"displayPrecision":2,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1000.00","minimumTrailingStopDistance":"0.50","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"NZD_JPY","type":"CURRENCY","displayName":"NZD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"BCO_USD","type":"CFD","displayName":"Brent Crude Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"HKD_JPY","type":"CURRENCY","displayName":"HKD/JPY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HUF","type":"CURRENCY","displayName":"USD/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CN50_USD","type":"CFD","displayName":"China A50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"XAG_GBP","type":"METAL","displayName":"Silver/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAU_CAD","type":"METAL","displayName":"Gold/CAD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"XAU_HKD","type":"METAL","displayName":"Gold/HKD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NAS100_USD","type":"CFD","displayName":"US Nas 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_ZAR","type":"CURRENCY","displayName":"EUR/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_PLN","type":"CURRENCY","displayName":"EUR/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_JPY","type":"CURRENCY","displayName":"AUD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CAD","type":"CURRENCY","displayName":"USD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_NZD","type":"METAL","displayName":"Silver/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"NL25_EUR","type":"CFD","displayName":"Netherlands 25","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"20000","marginRate":"0.02"},{"name":"DE30_EUR","type":"CFD","displayName":"Germany 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2500","marginRate":"0.02"},{"name":"XCU_USD","type":"CFD","displayName":"Copper","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.05"},{"name":"NZD_USD","type":"CURRENCY","displayName":"NZD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_CHF","type":"CURRENCY","displayName":"SGD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_USD","type":"METAL","displayName":"Gold","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB02Y_USD","type":"CFD","displayName":"US 2Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"TWIX_USD","type":"CFD","displayName":"Taiwan Index","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"US30_USD","type":"CFD","displayName":"US Wall St 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"USD_CNH","type":"CURRENCY","displayName":"USD/CNH","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"SGD_JPY","type":"CURRENCY","displayName":"SGD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_HKD","type":"METAL","displayName":"Silver/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAG_AUD","type":"METAL","displayName":"Silver/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_HUF","type":"CURRENCY","displayName":"EUR/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_CHF","type":"CURRENCY","displayName":"USD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_NOK","type":"CURRENCY","displayName":"EUR/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_XAG","type":"METAL","displayName":"Gold/Silver","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.05"},{"name":"WTICO_USD","type":"CFD","displayName":"West Texas Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"DE10YB_EUR","type":"CFD","displayName":"Bund","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"EUR_NZD","type":"CURRENCY","displayName":"EUR/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XPT_USD","type":"METAL","displayName":"Platinum","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_JPY","type":"METAL","displayName":"Silver/JPY","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"IN50_USD","type":"CFD","displayName":"India 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"GBP_HKD","type":"CURRENCY","displayName":"GBP/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_HKD","type":"CURRENCY","displayName":"CHF/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"TRY_JPY","type":"CURRENCY","displayName":"TRY/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_THB","type":"CURRENCY","displayName":"USD/THB","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_CHF","type":"CURRENCY","displayName":"GBP/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_USD","type":"CURRENCY","displayName":"AUD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_HKD","type":"CURRENCY","displayName":"EUR/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_NZD","type":"METAL","displayName":"Gold/NZD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"JP225_USD","type":"CFD","displayName":"Japan 225","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"UK10YB_GBP","type":"CFD","displayName":"UK 10Y Gilt","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_EUR","type":"METAL","displayName":"Silver/EUR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB10Y_USD","type":"CFD","displayName":"US 10Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"ZAR_JPY","type":"CURRENCY","displayName":"ZAR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_NZD","type":"CURRENCY","displayName":"AUD/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"FR40_EUR","type":"CFD","displayName":"France 40","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_DKK","type":"CURRENCY","displayName":"EUR/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_AUD","type":"CURRENCY","displayName":"EUR/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_PLN","type":"CURRENCY","displayName":"USD/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_AUD","type":"CURRENCY","displayName":"GBP/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_TRY","type":"CURRENCY","displayName":"EUR/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_JPY","type":"CURRENCY","displayName":"USD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CZK","type":"CURRENCY","displayName":"USD/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CHF_JPY","type":"CURRENCY","displayName":"CHF/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_HKD","type":"CURRENCY","displayName":"AUD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_HKD","type":"CURRENCY","displayName":"SGD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_USD","type":"METAL","displayName":"Silver","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"NZD_SGD","type":"CURRENCY","displayName":"NZD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_GBP","type":"METAL","displayName":"Gold/GBP","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USD_DKK","type":"CURRENCY","displayName":"USD/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CHF","type":"CURRENCY","displayName":"NZD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_HKD","type":"CURRENCY","displayName":"NZD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_NZD","type":"CURRENCY","displayName":"GBP/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"}],"lastTransactionID":"72"}
INFO  2018-08-23 16:35:21,369 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): false
INFO  2018-08-23 16:35:21,402 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++++++++++ Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:35:21,402 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_NZD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,403 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=EUR_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,403 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_HKD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,406 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CHF, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,409 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK10YB_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:35:21,410 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_JPY, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:35:21,410 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_SGD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,410 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK100_GBP, description=null, instrumentId=null, pip=1.0]
INFO  2018-08-23 16:35:21,411 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CAD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,412 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_PLN, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,412 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAG_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,412 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,414 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_USD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,415 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_ZAR, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:35:21,415 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAU_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:35:21,415 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++Finished Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:35:21,416 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument EUR_AUD is 0.00010
INFO  2018-08-23 16:35:21,417 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_JPY is 0.01000
INFO  2018-08-23 16:35:21,417 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_ZAR is 0.00010
INFO  2018-08-23 16:38:03,805 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/instruments HTTP/1.1
INFO  2018-08-23 16:38:04,765 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): {"instruments":[{"name":"USD_MXN","type":"CURRENCY","displayName":"USD/MXN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_USD","type":"CURRENCY","displayName":"GBP/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SGD","type":"CURRENCY","displayName":"USD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_SEK","type":"CURRENCY","displayName":"EUR/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AU200_AUD","type":"CFD","displayName":"Australia 200","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_CHF","type":"CURRENCY","displayName":"EUR/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CAD","type":"CURRENCY","displayName":"NZD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_JPY","type":"METAL","displayName":"Gold/JPY","pipLocation":1,"displayPrecision":0,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100000","minimumTrailingStopDistance":"50","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB30Y_USD","type":"CFD","displayName":"US T-Bond","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_CAD","type":"METAL","displayName":"Silver/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_SGD","type":"CURRENCY","displayName":"EUR/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_AUD","type":"METAL","displayName":"Gold/AUD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CAD_CHF","type":"CURRENCY","displayName":"CAD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_INR","type":"CURRENCY","displayName":"USD/INR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_SGD","type":"CURRENCY","displayName":"AUD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_CAD","type":"CURRENCY","displayName":"AUD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_SGD","type":"METAL","displayName":"Gold/SGD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CORN_USD","type":"CFD","displayName":"Corn","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"XPD_USD","type":"METAL","displayName":"Palladium","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_SGD","type":"METAL","displayName":"Silver/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB05Y_USD","type":"CFD","displayName":"US 5Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"CAD_HKD","type":"CURRENCY","displayName":"CAD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SUGAR_USD","type":"CFD","displayName":"Sugar","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"40000000","marginRate":"0.033333"},{"name":"XAU_CHF","type":"METAL","displayName":"Gold/CHF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NATGAS_USD","type":"CFD","displayName":"Natural Gas","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.02"},{"name":"USD_ZAR","type":"CURRENCY","displayName":"USD/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_GBP","type":"CURRENCY","displayName":"EUR/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SEK","type":"CURRENCY","displayName":"USD/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_SGD","type":"CURRENCY","displayName":"GBP/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HKD","type":"CURRENCY","displayName":"USD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"US2000_USD","type":"CFD","displayName":"US Russ 2000","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"10000","marginRate":"0.02"},{"name":"GBP_PLN","type":"CURRENCY","displayName":"GBP/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_CHF","type":"CURRENCY","displayName":"AUD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_TRY","type":"CURRENCY","displayName":"USD/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_JPY","type":"CURRENCY","displayName":"GBP/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"HK33_HKD","type":"CFD","displayName":"Hong Kong 33","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_CAD","type":"CURRENCY","displayName":"EUR/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_ZAR","type":"CURRENCY","displayName":"CHF/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"WHEAT_USD","type":"CFD","displayName":"Wheat","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"EUR_CZK","type":"CURRENCY","displayName":"EUR/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_JPY","type":"CURRENCY","displayName":"EUR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SOYBN_USD","type":"CFD","displayName":"Soybeans","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"600000","marginRate":"0.033333"},{"name":"XAG_CHF","type":"METAL","displayName":"Silver/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"GBP_ZAR","type":"CURRENCY","displayName":"GBP/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_SGD","type":"CURRENCY","displayName":"CAD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_NOK","type":"CURRENCY","displayName":"USD/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_CAD","type":"CURRENCY","displayName":"GBP/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SAR","type":"CURRENCY","displayName":"USD/SAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_JPY","type":"CURRENCY","displayName":"CAD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_USD","type":"CURRENCY","displayName":"EUR/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SPX500_USD","type":"CFD","displayName":"US SPX 500","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"8000","marginRate":"0.02"},{"name":"EU50_EUR","type":"CFD","displayName":"Europe 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"UK100_GBP","type":"CFD","displayName":"UK 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"500","marginRate":"0.02"},{"name":"XAU_EUR","type":"METAL","displayName":"Gold/EUR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"SG30_SGD","type":"CFD","displayName":"Singapore 30","pipLocation":-1,"displayPrecision":2,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1000.00","minimumTrailingStopDistance":"0.50","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"NZD_JPY","type":"CURRENCY","displayName":"NZD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"BCO_USD","type":"CFD","displayName":"Brent Crude Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"HKD_JPY","type":"CURRENCY","displayName":"HKD/JPY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HUF","type":"CURRENCY","displayName":"USD/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CN50_USD","type":"CFD","displayName":"China A50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"XAG_GBP","type":"METAL","displayName":"Silver/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAU_CAD","type":"METAL","displayName":"Gold/CAD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"XAU_HKD","type":"METAL","displayName":"Gold/HKD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NAS100_USD","type":"CFD","displayName":"US Nas 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_ZAR","type":"CURRENCY","displayName":"EUR/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_PLN","type":"CURRENCY","displayName":"EUR/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_JPY","type":"CURRENCY","displayName":"AUD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CAD","type":"CURRENCY","displayName":"USD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_NZD","type":"METAL","displayName":"Silver/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"NL25_EUR","type":"CFD","displayName":"Netherlands 25","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"20000","marginRate":"0.02"},{"name":"DE30_EUR","type":"CFD","displayName":"Germany 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2500","marginRate":"0.02"},{"name":"XCU_USD","type":"CFD","displayName":"Copper","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.05"},{"name":"NZD_USD","type":"CURRENCY","displayName":"NZD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_CHF","type":"CURRENCY","displayName":"SGD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_USD","type":"METAL","displayName":"Gold","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB02Y_USD","type":"CFD","displayName":"US 2Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"TWIX_USD","type":"CFD","displayName":"Taiwan Index","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"US30_USD","type":"CFD","displayName":"US Wall St 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"USD_CNH","type":"CURRENCY","displayName":"USD/CNH","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"SGD_JPY","type":"CURRENCY","displayName":"SGD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_HKD","type":"METAL","displayName":"Silver/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAG_AUD","type":"METAL","displayName":"Silver/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_HUF","type":"CURRENCY","displayName":"EUR/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_CHF","type":"CURRENCY","displayName":"USD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_NOK","type":"CURRENCY","displayName":"EUR/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_XAG","type":"METAL","displayName":"Gold/Silver","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.05"},{"name":"WTICO_USD","type":"CFD","displayName":"West Texas Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"DE10YB_EUR","type":"CFD","displayName":"Bund","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"EUR_NZD","type":"CURRENCY","displayName":"EUR/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XPT_USD","type":"METAL","displayName":"Platinum","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_JPY","type":"METAL","displayName":"Silver/JPY","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"IN50_USD","type":"CFD","displayName":"India 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"GBP_HKD","type":"CURRENCY","displayName":"GBP/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_HKD","type":"CURRENCY","displayName":"CHF/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"TRY_JPY","type":"CURRENCY","displayName":"TRY/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_THB","type":"CURRENCY","displayName":"USD/THB","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_CHF","type":"CURRENCY","displayName":"GBP/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_USD","type":"CURRENCY","displayName":"AUD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_HKD","type":"CURRENCY","displayName":"EUR/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_NZD","type":"METAL","displayName":"Gold/NZD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"JP225_USD","type":"CFD","displayName":"Japan 225","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"UK10YB_GBP","type":"CFD","displayName":"UK 10Y Gilt","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_EUR","type":"METAL","displayName":"Silver/EUR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB10Y_USD","type":"CFD","displayName":"US 10Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"ZAR_JPY","type":"CURRENCY","displayName":"ZAR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_NZD","type":"CURRENCY","displayName":"AUD/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"FR40_EUR","type":"CFD","displayName":"France 40","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_DKK","type":"CURRENCY","displayName":"EUR/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_AUD","type":"CURRENCY","displayName":"EUR/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_PLN","type":"CURRENCY","displayName":"USD/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_AUD","type":"CURRENCY","displayName":"GBP/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_TRY","type":"CURRENCY","displayName":"EUR/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_JPY","type":"CURRENCY","displayName":"USD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CZK","type":"CURRENCY","displayName":"USD/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CHF_JPY","type":"CURRENCY","displayName":"CHF/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_HKD","type":"CURRENCY","displayName":"AUD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_HKD","type":"CURRENCY","displayName":"SGD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_USD","type":"METAL","displayName":"Silver","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"NZD_SGD","type":"CURRENCY","displayName":"NZD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_GBP","type":"METAL","displayName":"Gold/GBP","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USD_DKK","type":"CURRENCY","displayName":"USD/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CHF","type":"CURRENCY","displayName":"NZD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_HKD","type":"CURRENCY","displayName":"NZD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_NZD","type":"CURRENCY","displayName":"GBP/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"}],"lastTransactionID":"72"}
INFO  2018-08-23 16:38:04,800 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): false
INFO  2018-08-23 16:38:04,834 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++++++++++ Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:40:11,925 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_NZD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,927 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=EUR_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,927 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_HKD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,928 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CHF, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,928 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK10YB_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:11,928 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_JPY, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:11,929 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_SGD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,930 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK100_GBP, description=null, instrumentId=null, pip=1.0]
INFO  2018-08-23 16:40:11,930 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CAD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,931 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_PLN, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,931 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAG_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,931 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,932 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_USD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,933 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_ZAR, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:11,933 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAU_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:11,933 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++Finished Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:40:11,936 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument EUR_AUD is 0.00010
INFO  2018-08-23 16:40:11,937 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_JPY is 0.01000
INFO  2018-08-23 16:40:11,937 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_ZAR is 0.00010
INFO  2018-08-23 16:40:27,092 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/instruments HTTP/1.1
INFO  2018-08-23 16:40:27,948 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): {"instruments":[{"name":"USD_MXN","type":"CURRENCY","displayName":"USD/MXN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_USD","type":"CURRENCY","displayName":"GBP/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SGD","type":"CURRENCY","displayName":"USD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_SEK","type":"CURRENCY","displayName":"EUR/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AU200_AUD","type":"CFD","displayName":"Australia 200","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_CHF","type":"CURRENCY","displayName":"EUR/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CAD","type":"CURRENCY","displayName":"NZD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_JPY","type":"METAL","displayName":"Gold/JPY","pipLocation":1,"displayPrecision":0,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100000","minimumTrailingStopDistance":"50","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB30Y_USD","type":"CFD","displayName":"US T-Bond","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_CAD","type":"METAL","displayName":"Silver/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_SGD","type":"CURRENCY","displayName":"EUR/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_AUD","type":"METAL","displayName":"Gold/AUD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CAD_CHF","type":"CURRENCY","displayName":"CAD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_INR","type":"CURRENCY","displayName":"USD/INR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_SGD","type":"CURRENCY","displayName":"AUD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_CAD","type":"CURRENCY","displayName":"AUD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_SGD","type":"METAL","displayName":"Gold/SGD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CORN_USD","type":"CFD","displayName":"Corn","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"XPD_USD","type":"METAL","displayName":"Palladium","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_SGD","type":"METAL","displayName":"Silver/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB05Y_USD","type":"CFD","displayName":"US 5Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"CAD_HKD","type":"CURRENCY","displayName":"CAD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SUGAR_USD","type":"CFD","displayName":"Sugar","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"40000000","marginRate":"0.033333"},{"name":"XAU_CHF","type":"METAL","displayName":"Gold/CHF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NATGAS_USD","type":"CFD","displayName":"Natural Gas","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.02"},{"name":"USD_ZAR","type":"CURRENCY","displayName":"USD/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_GBP","type":"CURRENCY","displayName":"EUR/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SEK","type":"CURRENCY","displayName":"USD/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_SGD","type":"CURRENCY","displayName":"GBP/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HKD","type":"CURRENCY","displayName":"USD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"US2000_USD","type":"CFD","displayName":"US Russ 2000","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"10000","marginRate":"0.02"},{"name":"GBP_PLN","type":"CURRENCY","displayName":"GBP/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_CHF","type":"CURRENCY","displayName":"AUD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_TRY","type":"CURRENCY","displayName":"USD/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_JPY","type":"CURRENCY","displayName":"GBP/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"HK33_HKD","type":"CFD","displayName":"Hong Kong 33","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_CAD","type":"CURRENCY","displayName":"EUR/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_ZAR","type":"CURRENCY","displayName":"CHF/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"WHEAT_USD","type":"CFD","displayName":"Wheat","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"EUR_CZK","type":"CURRENCY","displayName":"EUR/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_JPY","type":"CURRENCY","displayName":"EUR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SOYBN_USD","type":"CFD","displayName":"Soybeans","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"600000","marginRate":"0.033333"},{"name":"XAG_CHF","type":"METAL","displayName":"Silver/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"GBP_ZAR","type":"CURRENCY","displayName":"GBP/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_SGD","type":"CURRENCY","displayName":"CAD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_NOK","type":"CURRENCY","displayName":"USD/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_CAD","type":"CURRENCY","displayName":"GBP/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SAR","type":"CURRENCY","displayName":"USD/SAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_JPY","type":"CURRENCY","displayName":"CAD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_USD","type":"CURRENCY","displayName":"EUR/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SPX500_USD","type":"CFD","displayName":"US SPX 500","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"8000","marginRate":"0.02"},{"name":"EU50_EUR","type":"CFD","displayName":"Europe 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"UK100_GBP","type":"CFD","displayName":"UK 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"500","marginRate":"0.02"},{"name":"XAU_EUR","type":"METAL","displayName":"Gold/EUR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"SG30_SGD","type":"CFD","displayName":"Singapore 30","pipLocation":-1,"displayPrecision":2,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1000.00","minimumTrailingStopDistance":"0.50","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"NZD_JPY","type":"CURRENCY","displayName":"NZD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"BCO_USD","type":"CFD","displayName":"Brent Crude Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"HKD_JPY","type":"CURRENCY","displayName":"HKD/JPY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HUF","type":"CURRENCY","displayName":"USD/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CN50_USD","type":"CFD","displayName":"China A50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"XAG_GBP","type":"METAL","displayName":"Silver/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAU_CAD","type":"METAL","displayName":"Gold/CAD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"XAU_HKD","type":"METAL","displayName":"Gold/HKD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NAS100_USD","type":"CFD","displayName":"US Nas 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_ZAR","type":"CURRENCY","displayName":"EUR/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_PLN","type":"CURRENCY","displayName":"EUR/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_JPY","type":"CURRENCY","displayName":"AUD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CAD","type":"CURRENCY","displayName":"USD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_NZD","type":"METAL","displayName":"Silver/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"NL25_EUR","type":"CFD","displayName":"Netherlands 25","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"20000","marginRate":"0.02"},{"name":"DE30_EUR","type":"CFD","displayName":"Germany 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2500","marginRate":"0.02"},{"name":"XCU_USD","type":"CFD","displayName":"Copper","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.05"},{"name":"NZD_USD","type":"CURRENCY","displayName":"NZD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_CHF","type":"CURRENCY","displayName":"SGD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_USD","type":"METAL","displayName":"Gold","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB02Y_USD","type":"CFD","displayName":"US 2Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"TWIX_USD","type":"CFD","displayName":"Taiwan Index","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"US30_USD","type":"CFD","displayName":"US Wall St 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"USD_CNH","type":"CURRENCY","displayName":"USD/CNH","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"SGD_JPY","type":"CURRENCY","displayName":"SGD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_HKD","type":"METAL","displayName":"Silver/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAG_AUD","type":"METAL","displayName":"Silver/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_HUF","type":"CURRENCY","displayName":"EUR/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_CHF","type":"CURRENCY","displayName":"USD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_NOK","type":"CURRENCY","displayName":"EUR/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_XAG","type":"METAL","displayName":"Gold/Silver","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.05"},{"name":"WTICO_USD","type":"CFD","displayName":"West Texas Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"DE10YB_EUR","type":"CFD","displayName":"Bund","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"EUR_NZD","type":"CURRENCY","displayName":"EUR/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XPT_USD","type":"METAL","displayName":"Platinum","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_JPY","type":"METAL","displayName":"Silver/JPY","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"IN50_USD","type":"CFD","displayName":"India 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"GBP_HKD","type":"CURRENCY","displayName":"GBP/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_HKD","type":"CURRENCY","displayName":"CHF/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"TRY_JPY","type":"CURRENCY","displayName":"TRY/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_THB","type":"CURRENCY","displayName":"USD/THB","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_CHF","type":"CURRENCY","displayName":"GBP/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_USD","type":"CURRENCY","displayName":"AUD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_HKD","type":"CURRENCY","displayName":"EUR/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_NZD","type":"METAL","displayName":"Gold/NZD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"JP225_USD","type":"CFD","displayName":"Japan 225","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"UK10YB_GBP","type":"CFD","displayName":"UK 10Y Gilt","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_EUR","type":"METAL","displayName":"Silver/EUR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB10Y_USD","type":"CFD","displayName":"US 10Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"ZAR_JPY","type":"CURRENCY","displayName":"ZAR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_NZD","type":"CURRENCY","displayName":"AUD/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"FR40_EUR","type":"CFD","displayName":"France 40","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_DKK","type":"CURRENCY","displayName":"EUR/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_AUD","type":"CURRENCY","displayName":"EUR/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_PLN","type":"CURRENCY","displayName":"USD/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_AUD","type":"CURRENCY","displayName":"GBP/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_TRY","type":"CURRENCY","displayName":"EUR/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_JPY","type":"CURRENCY","displayName":"USD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CZK","type":"CURRENCY","displayName":"USD/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CHF_JPY","type":"CURRENCY","displayName":"CHF/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_HKD","type":"CURRENCY","displayName":"AUD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_HKD","type":"CURRENCY","displayName":"SGD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_USD","type":"METAL","displayName":"Silver","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"NZD_SGD","type":"CURRENCY","displayName":"NZD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_GBP","type":"METAL","displayName":"Gold/GBP","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USD_DKK","type":"CURRENCY","displayName":"USD/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CHF","type":"CURRENCY","displayName":"NZD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_HKD","type":"CURRENCY","displayName":"NZD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_NZD","type":"CURRENCY","displayName":"GBP/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"}],"lastTransactionID":"72"}
INFO  2018-08-23 16:40:27,978 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): false
INFO  2018-08-23 16:40:50,197 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++++++++++ Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:40:50,198 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_NZD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,198 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=EUR_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,198 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_HKD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,199 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CHF, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,200 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK10YB_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:50,200 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_JPY, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:50,201 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_SGD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,202 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK100_GBP, description=null, instrumentId=null, pip=1.0]
INFO  2018-08-23 16:40:50,202 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CAD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,202 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_PLN, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,202 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAG_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,203 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,204 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_USD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,204 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_ZAR, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:40:50,205 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAU_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:40:50,205 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++Finished Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:40:50,206 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument EUR_AUD is 0.00010
INFO  2018-08-23 16:40:50,207 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_JPY is 0.01000
INFO  2018-08-23 16:40:50,207 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_ZAR is 0.00010
INFO  2018-08-23 16:41:17,399 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/instruments HTTP/1.1
INFO  2018-08-23 16:41:21,611 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): {"instruments":[{"name":"USD_MXN","type":"CURRENCY","displayName":"USD/MXN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_USD","type":"CURRENCY","displayName":"GBP/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SGD","type":"CURRENCY","displayName":"USD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_SEK","type":"CURRENCY","displayName":"EUR/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AU200_AUD","type":"CFD","displayName":"Australia 200","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_CHF","type":"CURRENCY","displayName":"EUR/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CAD","type":"CURRENCY","displayName":"NZD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_JPY","type":"METAL","displayName":"Gold/JPY","pipLocation":1,"displayPrecision":0,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100000","minimumTrailingStopDistance":"50","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB30Y_USD","type":"CFD","displayName":"US T-Bond","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_CAD","type":"METAL","displayName":"Silver/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_SGD","type":"CURRENCY","displayName":"EUR/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_AUD","type":"METAL","displayName":"Gold/AUD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CAD_CHF","type":"CURRENCY","displayName":"CAD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_INR","type":"CURRENCY","displayName":"USD/INR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_SGD","type":"CURRENCY","displayName":"AUD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_CAD","type":"CURRENCY","displayName":"AUD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_SGD","type":"METAL","displayName":"Gold/SGD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CORN_USD","type":"CFD","displayName":"Corn","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"XPD_USD","type":"METAL","displayName":"Palladium","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_SGD","type":"METAL","displayName":"Silver/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB05Y_USD","type":"CFD","displayName":"US 5Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"CAD_HKD","type":"CURRENCY","displayName":"CAD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SUGAR_USD","type":"CFD","displayName":"Sugar","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"40000000","marginRate":"0.033333"},{"name":"XAU_CHF","type":"METAL","displayName":"Gold/CHF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NATGAS_USD","type":"CFD","displayName":"Natural Gas","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.02"},{"name":"USD_ZAR","type":"CURRENCY","displayName":"USD/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_GBP","type":"CURRENCY","displayName":"EUR/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SEK","type":"CURRENCY","displayName":"USD/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_SGD","type":"CURRENCY","displayName":"GBP/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HKD","type":"CURRENCY","displayName":"USD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"US2000_USD","type":"CFD","displayName":"US Russ 2000","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"10000","marginRate":"0.02"},{"name":"GBP_PLN","type":"CURRENCY","displayName":"GBP/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_CHF","type":"CURRENCY","displayName":"AUD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_TRY","type":"CURRENCY","displayName":"USD/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_JPY","type":"CURRENCY","displayName":"GBP/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"HK33_HKD","type":"CFD","displayName":"Hong Kong 33","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_CAD","type":"CURRENCY","displayName":"EUR/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_ZAR","type":"CURRENCY","displayName":"CHF/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"WHEAT_USD","type":"CFD","displayName":"Wheat","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"EUR_CZK","type":"CURRENCY","displayName":"EUR/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_JPY","type":"CURRENCY","displayName":"EUR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SOYBN_USD","type":"CFD","displayName":"Soybeans","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"600000","marginRate":"0.033333"},{"name":"XAG_CHF","type":"METAL","displayName":"Silver/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"GBP_ZAR","type":"CURRENCY","displayName":"GBP/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_SGD","type":"CURRENCY","displayName":"CAD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_NOK","type":"CURRENCY","displayName":"USD/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_CAD","type":"CURRENCY","displayName":"GBP/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SAR","type":"CURRENCY","displayName":"USD/SAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_JPY","type":"CURRENCY","displayName":"CAD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_USD","type":"CURRENCY","displayName":"EUR/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SPX500_USD","type":"CFD","displayName":"US SPX 500","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"8000","marginRate":"0.02"},{"name":"EU50_EUR","type":"CFD","displayName":"Europe 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"UK100_GBP","type":"CFD","displayName":"UK 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"500","marginRate":"0.02"},{"name":"XAU_EUR","type":"METAL","displayName":"Gold/EUR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"SG30_SGD","type":"CFD","displayName":"Singapore 30","pipLocation":-1,"displayPrecision":2,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1000.00","minimumTrailingStopDistance":"0.50","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"NZD_JPY","type":"CURRENCY","displayName":"NZD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"BCO_USD","type":"CFD","displayName":"Brent Crude Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"HKD_JPY","type":"CURRENCY","displayName":"HKD/JPY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HUF","type":"CURRENCY","displayName":"USD/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CN50_USD","type":"CFD","displayName":"China A50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"XAG_GBP","type":"METAL","displayName":"Silver/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAU_CAD","type":"METAL","displayName":"Gold/CAD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"XAU_HKD","type":"METAL","displayName":"Gold/HKD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NAS100_USD","type":"CFD","displayName":"US Nas 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_ZAR","type":"CURRENCY","displayName":"EUR/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_PLN","type":"CURRENCY","displayName":"EUR/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_JPY","type":"CURRENCY","displayName":"AUD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CAD","type":"CURRENCY","displayName":"USD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_NZD","type":"METAL","displayName":"Silver/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"NL25_EUR","type":"CFD","displayName":"Netherlands 25","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"20000","marginRate":"0.02"},{"name":"DE30_EUR","type":"CFD","displayName":"Germany 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2500","marginRate":"0.02"},{"name":"XCU_USD","type":"CFD","displayName":"Copper","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.05"},{"name":"NZD_USD","type":"CURRENCY","displayName":"NZD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_CHF","type":"CURRENCY","displayName":"SGD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_USD","type":"METAL","displayName":"Gold","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB02Y_USD","type":"CFD","displayName":"US 2Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"TWIX_USD","type":"CFD","displayName":"Taiwan Index","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"US30_USD","type":"CFD","displayName":"US Wall St 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"USD_CNH","type":"CURRENCY","displayName":"USD/CNH","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"SGD_JPY","type":"CURRENCY","displayName":"SGD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_HKD","type":"METAL","displayName":"Silver/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAG_AUD","type":"METAL","displayName":"Silver/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_HUF","type":"CURRENCY","displayName":"EUR/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_CHF","type":"CURRENCY","displayName":"USD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_NOK","type":"CURRENCY","displayName":"EUR/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_XAG","type":"METAL","displayName":"Gold/Silver","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.05"},{"name":"WTICO_USD","type":"CFD","displayName":"West Texas Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"DE10YB_EUR","type":"CFD","displayName":"Bund","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"EUR_NZD","type":"CURRENCY","displayName":"EUR/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XPT_USD","type":"METAL","displayName":"Platinum","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_JPY","type":"METAL","displayName":"Silver/JPY","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"IN50_USD","type":"CFD","displayName":"India 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"GBP_HKD","type":"CURRENCY","displayName":"GBP/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_HKD","type":"CURRENCY","displayName":"CHF/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"TRY_JPY","type":"CURRENCY","displayName":"TRY/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_THB","type":"CURRENCY","displayName":"USD/THB","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_CHF","type":"CURRENCY","displayName":"GBP/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_USD","type":"CURRENCY","displayName":"AUD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_HKD","type":"CURRENCY","displayName":"EUR/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_NZD","type":"METAL","displayName":"Gold/NZD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"JP225_USD","type":"CFD","displayName":"Japan 225","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"UK10YB_GBP","type":"CFD","displayName":"UK 10Y Gilt","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_EUR","type":"METAL","displayName":"Silver/EUR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB10Y_USD","type":"CFD","displayName":"US 10Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"ZAR_JPY","type":"CURRENCY","displayName":"ZAR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_NZD","type":"CURRENCY","displayName":"AUD/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"FR40_EUR","type":"CFD","displayName":"France 40","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_DKK","type":"CURRENCY","displayName":"EUR/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_AUD","type":"CURRENCY","displayName":"EUR/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_PLN","type":"CURRENCY","displayName":"USD/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_AUD","type":"CURRENCY","displayName":"GBP/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_TRY","type":"CURRENCY","displayName":"EUR/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_JPY","type":"CURRENCY","displayName":"USD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CZK","type":"CURRENCY","displayName":"USD/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CHF_JPY","type":"CURRENCY","displayName":"CHF/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_HKD","type":"CURRENCY","displayName":"AUD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_HKD","type":"CURRENCY","displayName":"SGD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_USD","type":"METAL","displayName":"Silver","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"NZD_SGD","type":"CURRENCY","displayName":"NZD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_GBP","type":"METAL","displayName":"Gold/GBP","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USD_DKK","type":"CURRENCY","displayName":"USD/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CHF","type":"CURRENCY","displayName":"NZD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_HKD","type":"CURRENCY","displayName":"NZD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_NZD","type":"CURRENCY","displayName":"GBP/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"}],"lastTransactionID":"72"}
INFO  2018-08-23 16:41:21,682 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): false
INFO  2018-08-23 16:41:39,707 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++++++++++ Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:41:39,708 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_NZD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,708 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=EUR_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,708 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_HKD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,708 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CHF, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,708 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK10YB_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_JPY, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_SGD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK100_GBP, description=null, instrumentId=null, pip=1.0]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CAD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_PLN, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,709 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAG_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,710 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,713 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_USD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,713 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_ZAR, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:41:39,714 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAU_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:41:39,714 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++Finished Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:41:39,719 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument EUR_AUD is 0.00010
INFO  2018-08-23 16:41:39,721 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_JPY is 0.01000
INFO  2018-08-23 16:41:39,723 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_ZAR is 0.00010
INFO  2018-08-23 16:42:01,536 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): Executing request : GET https://api-fxpractice.oanda.com/v3/accounts/101-004-7750633-001/instruments HTTP/1.1
INFO  2018-08-23 16:43:15,824 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): {"instruments":[{"name":"USD_MXN","type":"CURRENCY","displayName":"USD/MXN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_USD","type":"CURRENCY","displayName":"GBP/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SGD","type":"CURRENCY","displayName":"USD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_SEK","type":"CURRENCY","displayName":"EUR/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AU200_AUD","type":"CFD","displayName":"Australia 200","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_CHF","type":"CURRENCY","displayName":"EUR/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CAD","type":"CURRENCY","displayName":"NZD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_JPY","type":"METAL","displayName":"Gold/JPY","pipLocation":1,"displayPrecision":0,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100000","minimumTrailingStopDistance":"50","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB30Y_USD","type":"CFD","displayName":"US T-Bond","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_CAD","type":"METAL","displayName":"Silver/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_SGD","type":"CURRENCY","displayName":"EUR/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_AUD","type":"METAL","displayName":"Gold/AUD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CAD_CHF","type":"CURRENCY","displayName":"CAD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_INR","type":"CURRENCY","displayName":"USD/INR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_SGD","type":"CURRENCY","displayName":"AUD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_CAD","type":"CURRENCY","displayName":"AUD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_SGD","type":"METAL","displayName":"Gold/SGD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"CORN_USD","type":"CFD","displayName":"Corn","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"XPD_USD","type":"METAL","displayName":"Palladium","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_SGD","type":"METAL","displayName":"Silver/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB05Y_USD","type":"CFD","displayName":"US 5Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"CAD_HKD","type":"CURRENCY","displayName":"CAD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SUGAR_USD","type":"CFD","displayName":"Sugar","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"40000000","marginRate":"0.033333"},{"name":"XAU_CHF","type":"METAL","displayName":"Gold/CHF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NATGAS_USD","type":"CFD","displayName":"Natural Gas","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.02"},{"name":"USD_ZAR","type":"CURRENCY","displayName":"USD/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_GBP","type":"CURRENCY","displayName":"EUR/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SEK","type":"CURRENCY","displayName":"USD/SEK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_SGD","type":"CURRENCY","displayName":"GBP/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HKD","type":"CURRENCY","displayName":"USD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"US2000_USD","type":"CFD","displayName":"US Russ 2000","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"10000","marginRate":"0.02"},{"name":"GBP_PLN","type":"CURRENCY","displayName":"GBP/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_CHF","type":"CURRENCY","displayName":"AUD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_TRY","type":"CURRENCY","displayName":"USD/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_JPY","type":"CURRENCY","displayName":"GBP/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"HK33_HKD","type":"CFD","displayName":"Hong Kong 33","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_CAD","type":"CURRENCY","displayName":"EUR/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_ZAR","type":"CURRENCY","displayName":"CHF/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"WHEAT_USD","type":"CFD","displayName":"Wheat","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"1500000","marginRate":"0.033333"},{"name":"EUR_CZK","type":"CURRENCY","displayName":"EUR/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_JPY","type":"CURRENCY","displayName":"EUR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SOYBN_USD","type":"CFD","displayName":"Soybeans","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"600000","marginRate":"0.033333"},{"name":"XAG_CHF","type":"METAL","displayName":"Silver/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"GBP_ZAR","type":"CURRENCY","displayName":"GBP/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_SGD","type":"CURRENCY","displayName":"CAD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_NOK","type":"CURRENCY","displayName":"USD/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_CAD","type":"CURRENCY","displayName":"GBP/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_SAR","type":"CURRENCY","displayName":"USD/SAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CAD_JPY","type":"CURRENCY","displayName":"CAD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_USD","type":"CURRENCY","displayName":"EUR/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SPX500_USD","type":"CFD","displayName":"US SPX 500","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"8000","marginRate":"0.02"},{"name":"EU50_EUR","type":"CFD","displayName":"Europe 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"UK100_GBP","type":"CFD","displayName":"UK 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"500","marginRate":"0.02"},{"name":"XAU_EUR","type":"METAL","displayName":"Gold/EUR","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"SG30_SGD","type":"CFD","displayName":"Singapore 30","pipLocation":-1,"displayPrecision":2,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1000.00","minimumTrailingStopDistance":"0.50","maximumPositionSize":"0","maximumOrderUnits":"3000","marginRate":"0.02"},{"name":"NZD_JPY","type":"CURRENCY","displayName":"NZD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"BCO_USD","type":"CFD","displayName":"Brent Crude Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"HKD_JPY","type":"CURRENCY","displayName":"HKD/JPY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_HUF","type":"CURRENCY","displayName":"USD/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CN50_USD","type":"CFD","displayName":"China A50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"XAG_GBP","type":"METAL","displayName":"Silver/GBP","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAU_CAD","type":"METAL","displayName":"Gold/CAD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"XAU_HKD","type":"METAL","displayName":"Gold/HKD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"NAS100_USD","type":"CFD","displayName":"US Nas 100","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"4000","marginRate":"0.02"},{"name":"EUR_ZAR","type":"CURRENCY","displayName":"EUR/ZAR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"EUR_PLN","type":"CURRENCY","displayName":"EUR/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"AUD_JPY","type":"CURRENCY","displayName":"AUD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CAD","type":"CURRENCY","displayName":"USD/CAD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_NZD","type":"METAL","displayName":"Silver/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"NL25_EUR","type":"CFD","displayName":"Netherlands 25","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"20000","marginRate":"0.02"},{"name":"DE30_EUR","type":"CFD","displayName":"Germany 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2500","marginRate":"0.02"},{"name":"XCU_USD","type":"CFD","displayName":"Copper","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"2500000","marginRate":"0.05"},{"name":"NZD_USD","type":"CURRENCY","displayName":"NZD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_CHF","type":"CURRENCY","displayName":"SGD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_USD","type":"METAL","displayName":"Gold","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USB02Y_USD","type":"CFD","displayName":"US 2Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"TWIX_USD","type":"CFD","displayName":"Taiwan Index","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"US30_USD","type":"CFD","displayName":"US Wall St 30","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"USD_CNH","type":"CURRENCY","displayName":"USD/CNH","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"SGD_JPY","type":"CURRENCY","displayName":"SGD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_HKD","type":"METAL","displayName":"Silver/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"XAG_AUD","type":"METAL","displayName":"Silver/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"EUR_HUF","type":"CURRENCY","displayName":"EUR/HUF","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_CHF","type":"CURRENCY","displayName":"USD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_NOK","type":"CURRENCY","displayName":"EUR/NOK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_XAG","type":"METAL","displayName":"Gold/Silver","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.05"},{"name":"WTICO_USD","type":"CFD","displayName":"West Texas Oil","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000","marginRate":"0.02"},{"name":"DE10YB_EUR","type":"CFD","displayName":"Bund","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"EUR_NZD","type":"CURRENCY","displayName":"EUR/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XPT_USD","type":"METAL","displayName":"Platinum","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"5000","marginRate":"0.05"},{"name":"XAG_JPY","type":"METAL","displayName":"Silver/JPY","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"IN50_USD","type":"CFD","displayName":"India 50","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.05"},{"name":"GBP_HKD","type":"CURRENCY","displayName":"GBP/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"CHF_HKD","type":"CURRENCY","displayName":"CHF/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"TRY_JPY","type":"CURRENCY","displayName":"TRY/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_THB","type":"CURRENCY","displayName":"USD/THB","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_CHF","type":"CURRENCY","displayName":"GBP/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_USD","type":"CURRENCY","displayName":"AUD/USD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_HKD","type":"CURRENCY","displayName":"EUR/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_NZD","type":"METAL","displayName":"Gold/NZD","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"JP225_USD","type":"CFD","displayName":"Japan 225","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"1000","marginRate":"0.02"},{"name":"UK10YB_GBP","type":"CFD","displayName":"UK 10Y Gilt","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"XAG_EUR","type":"METAL","displayName":"Silver/EUR","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.05"},{"name":"USB10Y_USD","type":"CFD","displayName":"US 10Y T-Note","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"60000","marginRate":"0.02"},{"name":"ZAR_JPY","type":"CURRENCY","displayName":"ZAR/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_NZD","type":"CURRENCY","displayName":"AUD/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"FR40_EUR","type":"CFD","displayName":"France 40","pipLocation":0,"displayPrecision":1,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"10000.0","minimumTrailingStopDistance":"5.0","maximumPositionSize":"0","maximumOrderUnits":"2000","marginRate":"0.02"},{"name":"EUR_DKK","type":"CURRENCY","displayName":"EUR/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_AUD","type":"CURRENCY","displayName":"EUR/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_PLN","type":"CURRENCY","displayName":"USD/PLN","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"GBP_AUD","type":"CURRENCY","displayName":"GBP/AUD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"EUR_TRY","type":"CURRENCY","displayName":"EUR/TRY","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"USD_JPY","type":"CURRENCY","displayName":"USD/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"USD_CZK","type":"CURRENCY","displayName":"USD/CZK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.05"},{"name":"CHF_JPY","type":"CURRENCY","displayName":"CHF/JPY","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"AUD_HKD","type":"CURRENCY","displayName":"AUD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"SGD_HKD","type":"CURRENCY","displayName":"SGD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAG_USD","type":"METAL","displayName":"Silver","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"1000000","marginRate":"0.02"},{"name":"NZD_SGD","type":"CURRENCY","displayName":"NZD/SGD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"XAU_GBP","type":"METAL","displayName":"Gold/GBP","pipLocation":-2,"displayPrecision":3,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"100.000","minimumTrailingStopDistance":"0.050","maximumPositionSize":"0","maximumOrderUnits":"50000","marginRate":"0.02"},{"name":"USD_DKK","type":"CURRENCY","displayName":"USD/DKK","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_CHF","type":"CURRENCY","displayName":"NZD/CHF","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"NZD_HKD","type":"CURRENCY","displayName":"NZD/HKD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"},{"name":"GBP_NZD","type":"CURRENCY","displayName":"GBP/NZD","pipLocation":-4,"displayPrecision":5,"tradeUnitsPrecision":0,"minimumTradeSize":"1","maximumTrailingStopDistance":"1.00000","minimumTrailingStopDistance":"0.00050","maximumPositionSize":"0","maximumOrderUnits":"100000000","marginRate":"0.02"}],"lastTransactionID":"72"}
INFO  2018-08-23 16:43:15,862 [main] oandaAPI.instruments.OandaInstrumentDataProviderService(getInstruments): false
INFO  2018-08-23 16:43:36,576 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++++++++++ Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:43:36,577 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_NZD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,577 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=EUR_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,577 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_HKD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,577 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CHF, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,578 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK10YB_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:43:36,578 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_JPY, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:43:36,578 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_SGD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,578 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=UK100_GBP, description=null, instrumentId=null, pip=1.0]
INFO  2018-08-23 16:43:36,579 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_CAD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,579 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_PLN, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,579 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAG_GBP, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,579 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_AUD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,581 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_USD, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,581 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=GBP_ZAR, description=null, instrumentId=null, pip=1.0E-4]
INFO  2018-08-23 16:43:36,581 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): TradeableInstrument [instrument=XAU_GBP, description=null, instrumentId=null, pip=0.01]
INFO  2018-08-23 16:43:36,582 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): +++++++++++++++++++++++Finished Dumping Instrument Info +++++++++++++++++++++++++++++
INFO  2018-08-23 16:43:36,583 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument EUR_AUD is 0.00010
INFO  2018-08-23 16:43:36,583 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_JPY is 0.01000
INFO  2018-08-23 16:43:36,584 [main] oandaAPI.tests.InstrumentTest(testInstrumentService): Pip for instrument USD_ZAR is 0.00010
